!function(e){function n(e){delete installedChunks[e]}function t(e){var n=document.getElementsByTagName("head")[0],t=document.createElement("script");t.type="text/javascript",t.charset="utf-8",t.src=h.p+""+e+"."+w+".hot-update.js",n.appendChild(t)}function r(){return new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var t=new XMLHttpRequest,r=h.p+""+w+".hot-update.json";t.open("GET",r,!0),t.timeout=1e4,t.send(null)}catch(e){return n(e)}t.onreadystatechange=function(){if(4===t.readyState)if(0===t.status)n(new Error("Manifest request to "+r+" timed out."));else if(404===t.status)e();else if(200!==t.status&&304!==t.status)n(new Error("Manifest request to "+r+" failed."));else{try{var o=JSON.parse(t.responseText)}catch(e){return void n(e)}e(o)}}})}function o(e){var n=U[e];if(!n)return h;var t=function(t){return n.hot.active?(U[t]?U[t].parents.indexOf(e)<0&&U[t].parents.push(e):(y=[e],v=t),n.children.indexOf(t)<0&&n.children.push(t)):(console.warn("[HMR] unexpected require("+t+") from disposed module "+e),y=[]),h(t)};for(var r in h)Object.prototype.hasOwnProperty.call(h,r)&&"e"!==r&&Object.defineProperty(t,r,function(e){return{configurable:!0,enumerable:!0,get:function(){return h[e]},set:function(n){h[e]=n}}}(r));return t.e=function(e){function n(){z--,"prepare"===O&&(C[e]||u(e),0===z&&0===_&&c())}return"ready"===O&&i("prepare"),z++,h.e(e).then(n,function(e){throw n(),e})},t}function a(e){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:v!==e,active:!0,accept:function(e,t){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._acceptedDependencies[e[r]]=t||function(){};else n._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._declinedDependencies[e[t]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=n._disposeHandlers.indexOf(e);t>=0&&n._disposeHandlers.splice(t,1)},check:d,apply:p,status:function(e){if(!e)return O;V.push(e)},addStatusHandler:function(e){V.push(e)},removeStatusHandler:function(e){var n=V.indexOf(e);n>=0&&V.splice(n,1)},data:N[e]};return v=void 0,n}function i(e){O=e;for(var n=0;n<V.length;n++)V[n].call(null,e)}function l(e){return+e+""===e?+e:e}function d(e){if("idle"!==O)throw new Error("check() is only allowed in idle status");return k=e,i("check"),r().then(function(e){if(!e)return i("idle"),null;x={},C={},E=e.c,b=e.h,i("prepare");var n=new Promise(function(e,n){g={resolve:e,reject:n}});m={};return u(0),"prepare"===O&&0===z&&0===_&&c(),n})}function s(e,n){if(E[e]&&x[e]){x[e]=!1;for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(m[t]=n[t]);0==--_&&0===z&&c()}}function u(e){E[e]?(x[e]=!0,_++,t(e)):C[e]=!0}function c(){i("ready");var e=g;if(g=null,e)if(k)p(k).then(function(n){e.resolve(n)},function(n){e.reject(n)});else{var n=[];for(var t in m)Object.prototype.hasOwnProperty.call(m,t)&&n.push(l(t));e.resolve(n)}}function p(t){function r(e,n){for(var t=0;t<n.length;t++){var r=n[t];e.indexOf(r)<0&&e.push(r)}}if("ready"!==O)throw new Error("apply() is only allowed in ready status");t=t||{};var o,a,d,s,u,c={},p=[],f={},v=function(){console.warn("[HMR] unexpected require("+k.moduleId+") to disposed module")};for(var g in m)if(Object.prototype.hasOwnProperty.call(m,g)){u=l(g);var k;k=m[g]?function(e){for(var n=[e],t={},o=n.slice().map(function(e){return{chain:[e],id:e}});o.length>0;){var a=o.pop(),i=a.id,l=a.chain;if((s=U[i])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:l,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:l,moduleId:i};for(var d=0;d<s.parents.length;d++){var u=s.parents[d],c=U[u];if(c){if(c.hot._declinedDependencies[i])return{type:"declined",chain:l.concat([u]),moduleId:i,parentId:u};n.indexOf(u)>=0||(c.hot._acceptedDependencies[i]?(t[u]||(t[u]=[]),r(t[u],[i])):(delete t[u],n.push(u),o.push({chain:l.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}(u):{type:"disposed",moduleId:g};var j=!1,V=!1,_=!1,z="";switch(k.chain&&(z="\nUpdate propagation: "+k.chain.join(" -> ")),k.type){case"self-declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(j=new Error("Aborted because of self decline: "+k.moduleId+z));break;case"declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(j=new Error("Aborted because of declined dependency: "+k.moduleId+" in "+k.parentId+z));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(k),t.ignoreUnaccepted||(j=new Error("Aborted because "+u+" is not accepted"+z));break;case"accepted":t.onAccepted&&t.onAccepted(k),V=!0;break;case"disposed":t.onDisposed&&t.onDisposed(k),_=!0;break;default:throw new Error("Unexception type "+k.type)}if(j)return i("abort"),Promise.reject(j);if(V){f[u]=m[u],r(p,k.outdatedModules);for(u in k.outdatedDependencies)Object.prototype.hasOwnProperty.call(k.outdatedDependencies,u)&&(c[u]||(c[u]=[]),r(c[u],k.outdatedDependencies[u]))}_&&(r(p,[k.moduleId]),f[u]=v)}var C=[];for(a=0;a<p.length;a++)u=p[a],U[u]&&U[u].hot._selfAccepted&&C.push({module:u,errorHandler:U[u].hot._selfAccepted});i("dispose"),Object.keys(E).forEach(function(e){!1===E[e]&&n(e)});for(var x,P=p.slice();P.length>0;)if(u=P.pop(),s=U[u]){var R={},M=s.hot._disposeHandlers;for(d=0;d<M.length;d++)(o=M[d])(R);for(N[u]=R,s.hot.active=!1,delete U[u],d=0;d<s.children.length;d++){var S=U[s.children[d]];S&&((x=S.parents.indexOf(u))>=0&&S.parents.splice(x,1))}}var D,A;for(u in c)if(Object.prototype.hasOwnProperty.call(c,u)&&(s=U[u]))for(A=c[u],d=0;d<A.length;d++)D=A[d],(x=s.children.indexOf(D))>=0&&s.children.splice(x,1);i("apply"),w=b;for(u in f)Object.prototype.hasOwnProperty.call(f,u)&&(e[u]=f[u]);var T=null;for(u in c)if(Object.prototype.hasOwnProperty.call(c,u)){s=U[u],A=c[u];var I=[];for(a=0;a<A.length;a++)D=A[a],o=s.hot._acceptedDependencies[D],I.indexOf(o)>=0||I.push(o);for(a=0;a<I.length;a++){o=I[a];try{o(A)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:A[a],error:e}),t.ignoreErrored||T||(T=e)}}}for(a=0;a<C.length;a++){var H=C[a];u=H.module,y=[u];try{h(u)}catch(e){if("function"==typeof H.errorHandler)try{H.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,orginalError:e}),t.ignoreErrored||T||(T=n),T||(T=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||T||(T=e)}}return T?(i("fail"),Promise.reject(T)):(i("idle"),Promise.resolve(p))}function h(n){if(U[n])return U[n].exports;var t=U[n]={i:n,l:!1,exports:{},hot:a(n),parents:(j=y,y=[],j),children:[]};return e[n].call(t.exports,t,t.exports,o(n)),t.l=!0,t.exports}var f=this.webpackHotUpdate;this.webpackHotUpdate=function(e,n){s(e,n),f&&f(e,n)};var v,g,m,b,k=!0,w="f46f4078d1c540e9c0c4",N={},y=[],j=[],V=[],O="idle",_=0,z=0,C={},x={},E={},U={};h.m=e,h.c=U,h.i=function(e){return e},h.d=function(e,n,t){h.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:t})},h.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return h.d(n,"a",n),n},h.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},h.p="/oclat/",h.h=function(){return w},o(31)(h.s=31)}([function(e,n,t){e.exports=t(43),e.exports.default=e.exports},function(e,n,t){e.exports=t(50).default,e.exports.default=e.exports},function(e,n,t){"use strict";function r(e,t,r,o,a,i){b.isUndefined(o)&&(o=n.EMPTY_OBJ);var l=new t(r,o);e.children=l,l._blockSetState=!1,l.context=o,l.props===n.EMPTY_OBJ&&(l.props=r),l._lifecycle=i,l._unmounted=!1,l._pendingSetState=!0,l._isSVG=a,b.isUndefined(l.componentWillMount)||(l._blockRender=!0,l.componentWillMount(),l._blockRender=!1);var d;b.isUndefined(l.getChildContext)||(d=l.getChildContext()),b.isNullOrUndef(d)?l._childContext=o:l._childContext=b.combineFrom(o,d),b.isNull(k.options.beforeRender)||k.options.beforeRender(l);var s=l.render(r,l.state,o);return b.isNull(k.options.afterRender)||k.options.afterRender(l),b.isArray(s)?b.throwError():b.isInvalid(s)?s=w.createVoidVNode():b.isStringOrNumber(s)?s=w.createTextVNode(s,null):(s.dom&&(s=w.directClone(s)),28&s.flags&&(s.parentVNode=e)),l._pendingSetState=!1,l._lastInput=s,l}function o(e,n,t,r,o,i,l){a(t,y.mount(n,null,r,o,i),e,r,l)}function a(e,n,t,r,o){j.unmount(t,null,r,!1,o),h(e,n,t.dom)}function i(e,n,t,r){var o=n(t,r);return b.isArray(o)?b.throwError():b.isInvalid(o)?o=w.createVoidVNode():b.isStringOrNumber(o)?o=w.createTextVNode(o,null):(o.dom&&(o=w.directClone(o)),28&o.flags&&(o.parentVNode=e)),o}function l(e,n){""!==n?e.textContent=n:e.appendChild(document.createTextNode(""))}function d(e,n){e.firstChild.nodeValue=n}function s(e,n){e.appendChild(n)}function u(e,n,t){b.isNullOrUndef(t)?s(e,n):e.insertBefore(n,t)}function c(e,n){return!0===n?document.createElementNS(N.svgNS,e):document.createElement(e)}function p(e,n,t,r,o,a,i){j.unmount(e,null,r,!1,i);var l=y.mount(n,null,r,o,a);n.dom=l,h(t,l,e.dom)}function h(e,n,t){e||(e=t.parentNode),e.replaceChild(n,t)}function f(e,n){e.removeChild(n)}function v(e,n,t,r){e.textContent="",(!k.options.recyclingEnabled||k.options.recyclingEnabled&&!r)&&g(null,n,t,r)}function g(e,n,t,r){for(var o=0,a=n.length;o<a;o++){var i=n[o];b.isInvalid(i)||j.unmount(i,e,t,!0,r)}}function m(e,n){return n.length>0&&!b.isNullOrUndef(n[0])&&!b.isNullOrUndef(n[0].key)&&e.length>0&&!b.isNullOrUndef(e[0])&&!b.isNullOrUndef(e[0].key)}Object.defineProperty(n,"__esModule",{value:!0});var b=t(0),k=t(3),w=t(4),N=t(8),y=t(9),j=t(11);n.EMPTY_OBJ={},n.createClassComponentInstance=r,n.replaceLastChildAndUnmount=o,n.replaceVNode=a,n.createFunctionalComponentInput=i,n.setTextContent=l,n.updateTextContent=d,n.appendChild=s,n.insertOrAppend=u,n.documentCreateElement=c,n.replaceWithNewNode=p,n.replaceChild=h,n.removeChild=f,n.removeAllChildren=v,n.removeChildren=g,n.isKeyed=m},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.options={afterMount:null,afterRender:null,afterUpdate:null,beforeRender:null,beforeUnmount:null,createVNode:null,findDOMNodeEnabled:!1,recyclingEnabled:!1,roots:[]}},function(e,n,t){"use strict";function r(e,n,t,r,o,a,i){this.children=e,this.className=n,this.dom=null,this.flags=t,this.key=r,this.props=o,this.ref=a,this.type=i}function o(e,n,t,o,a,i,l,d){16&e&&(e=u.isStatefulComponent(n)?4:8);var s=new r(void 0===o?null:o,void 0===t?null:t,e,void 0===i?null:i,void 0===a?null:a,void 0===l?null:l,n);return!0!==d&&p.normalize(s),null!==h.options.createVNode&&h.options.createVNode(s),s}function a(e){var n,t=e.flags;if(28&t){var r=void 0,i=e.props;if(u.isNull(i))r=c.EMPTY_OBJ;else{r={};for(var l in i)r[l]=i[l]}n=o(t,e.type,null,null,r,e.key,e.ref,!0);var p=n.props,h=p.children;if(h)if(u.isArray(h)){var f=h.length;if(f>0){for(var v=[],g=0;g<f;g++){var m=h[g];u.isStringOrNumber(m)?v.push(m):!u.isInvalid(m)&&s(m)&&v.push(a(m))}p.children=v}}else s(h)&&(p.children=a(h));n.children=null}else if(3970&t){var b=e.children,r=void 0,i=e.props;if(null===i)r=c.EMPTY_OBJ;else{r={};for(var l in i)r[l]=i[l]}n=o(t,e.type,e.className,b,r,e.key,e.ref,!b)}else 1&t&&(n=d(e.children,e.key));return n}function i(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var i=t,l=t.length;l>0&&!u.isUndefined(t[0])&&(n||(n={}),1===l&&(i=t[0]),u.isUndefined(i)||(n.children=i));var p;if(u.isArray(e)){for(var h=[],f=0,v=e.length;f<v;f++)h.push(a(e[f]));p=h}else{var g=e.flags,m=e.className||n&&n.className,b=u.isNullOrUndef(e.key)?n?n.key:null:e.key,k=e.ref||(n?n.ref:null);if(28&g){p=o(g,e.type,m,null,e.props||n?u.combineFrom(e.props,n):c.EMPTY_OBJ,b,k,!0);var w=p.props;if(w){var N=w.children;if(N)if(u.isArray(N)){var v=N.length;if(v>0){for(var h=[],f=0;f<v;f++){var y=N[f];u.isStringOrNumber(y)?h.push(y):!u.isInvalid(y)&&s(y)&&h.push(a(y))}w.children=h}}else s(N)&&(w.children=a(N))}p.children=null}else 3970&g?(i=n&&!u.isUndefined(n.children)?n.children:e.children,p=o(g,e.type,m,i,e.props||n?u.combineFrom(e.props,n):c.EMPTY_OBJ,b,k,!i)):1&g&&(p=d(e.children,b))}return p}function l(){return o(4096,null)}function d(e,n){return o(1,null,null,e,null,n)}function s(e){return!!e.flags}Object.defineProperty(n,"__esModule",{value:!0});var u=t(0),c=t(2),p=t(20),h=t(3);n.createVNode=o,n.directClone=a,n.cloneVNode=i,n.createVoidVNode=l,n.createTextVNode=d,n.isVNode=s},function(e,n,t){"use strict";function r(e,n,t,r,o,i,u){if(e!==n){var c=e.flags,p=n.flags;28&p?28&c?l(e,n,t,r,o,i,4&p,u):_.replaceVNode(t,j.mountComponent(n,null,r,o,i,(4&p)>0),e,r,u):3970&p?3970&c?a(e,n,t,r,o,i,u):_.replaceVNode(t,j.mountElement(n,null,r,o,i),e,r,u):1&p?1&c?d(e,n):_.replaceVNode(t,j.mountText(n,null),e,r,u):4096&p?4096&c?s(e,n):_.replaceVNode(t,j.mountVoid(n,null),e,r,u):_.replaceLastChildAndUnmount(e,n,t,r,o,i,u)}}function o(e,n,t,r){w.isVNode(e)?O.unmount(e,n,t,!0,r):b.isArray(e)?_.removeAllChildren(n,e,t,r):n.textContent=""}function a(e,n,t,r,o,a,l){var d=n.type;if(e.type!==d)_.replaceWithNewNode(e,n,t,r,o,a,l);else{var s=e.dom,u=e.props,c=n.props,p=e.children,h=n.children,v=e.flags,g=n.flags,k=n.ref,w=e.className,N=n.className;if(n.dom=s,a=a||(128&g)>0,p!==h&&i(v,g,p,h,s,r,o,a,l),u!==c){var y=u||_.EMPTY_OBJ,V=c||_.EMPTY_OBJ,O=!1;if(V!==_.EMPTY_OBJ){var C=(3584&g)>0;C&&(O=z.isControlledFormElement(V));for(var x in V){var E=V[x];f(x,y[x],E,s,a,O)}C&&z.processElement(g,n,s,V,!1,O)}if(y!==_.EMPTY_OBJ)for(var x in y)b.isNullOrUndef(V[x])&&m(x,y[x],s)}w!==N&&(b.isNullOrUndef(N)?s.removeAttribute("class"):a?s.setAttribute("class",N):s.className=N),k&&(e.ref!==k||l)&&j.mountRef(s,k,r)}}function i(e,n,t,a,i,l,d,s,p){var h=!1,f=!1;64&n?h=!0:(32&e)>0&&(32&n)>0?(f=!0,h=!0):b.isInvalid(a)?o(t,i,l,p):b.isInvalid(t)?b.isStringOrNumber(a)?_.setTextContent(i,a):b.isArray(a)?j.mountArrayChildren(a,i,l,d,s):j.mount(a,i,l,d,s):b.isStringOrNumber(a)?b.isStringOrNumber(t)?_.updateTextContent(i,a):(o(t,i,l,p),_.setTextContent(i,a)):b.isArray(a)?b.isArray(t)?(h=!0,_.isKeyed(t,a)&&(f=!0)):(o(t,i,l,p),j.mountArrayChildren(a,i,l,d,s)):b.isArray(t)?(_.removeAllChildren(i,t,l,p),j.mount(a,i,l,d,s)):w.isVNode(a)&&(w.isVNode(t)?r(t,a,i,l,d,s,p):(o(t,i,l,p),j.mount(a,i,l,d,s))),h&&(f?c(t,a,i,l,d,s,p):u(t,a,i,l,d,s,p))}function l(e,n,t,o,a,i,l,d){var s=e.type,u=n.type,c=e.key,p=n.key;if(s!==u||c!==p)return _.replaceWithNewNode(e,n,t,o,a,i,d),!1;var h=n.props||_.EMPTY_OBJ;if(l){var f=e.children;if(f._updating=!0,f._unmounted){if(b.isNull(t))return!0;_.replaceChild(t,j.mountComponent(n,null,o,a,i,(4&n.flags)>0),e.dom)}else{var v=!b.isUndefined(f.componentDidUpdate),g=f.state,m=v?b.combineFrom(g,null):g,N=f.props,y=void 0;b.isUndefined(f.getChildContext)||(y=f.getChildContext()),n.children=f,f._isSVG=i,y=b.isNullOrUndef(y)?a:b.combineFrom(a,y);var O=f._lastInput,z=f._updateComponent(m,g,N,h,a,!1,!1),C=!0;f._childContext=y,b.isInvalid(z)?z=w.createVoidVNode():z===b.NO_OP?(z=O,C=!1):b.isStringOrNumber(z)?z=w.createTextVNode(z,null):b.isArray(z)?b.throwError():b.isObject(z)&&(b.isNull(z.dom)||(z=w.directClone(z))),28&z.flags?z.parentVNode=n:28&O.flags&&(O.parentVNode=n),f._lastInput=z,f._vNode=n,C&&(r(O,z,t,o,y,i,d),v&&f.componentDidUpdate(N,m),b.isNull(k.options.afterUpdate)||k.options.afterUpdate(n),k.options.findDOMNodeEnabled&&V.componentToDOMNodeMap.set(f,z.dom)),n.dom=z.dom}f._updating=!1}else{var x=!0,N=e.props,E=n.ref,U=!b.isNullOrUndef(E),O=e.children,z=O;n.dom=e.dom,n.children=O,c!==p?x=!0:U&&!b.isNullOrUndef(E.onComponentShouldUpdate)&&(x=E.onComponentShouldUpdate(N,h)),!1!==x&&(U&&!b.isNullOrUndef(E.onComponentWillUpdate)&&E.onComponentWillUpdate(N,h),z=u(h,a),b.isInvalid(z)?z=w.createVoidVNode():b.isStringOrNumber(z)&&z!==b.NO_OP?z=w.createTextVNode(z,null):b.isArray(z)?b.throwError():b.isObject(z)&&(b.isNull(z.dom)||(z=w.directClone(z))),z!==b.NO_OP&&(r(O,z,t,o,a,i,d),n.children=z,U&&!b.isNullOrUndef(E.onComponentDidUpdate)&&E.onComponentDidUpdate(N,h),n.dom=z.dom)),28&z.flags?z.parentVNode=n:28&O.flags&&(O.parentVNode=n)}return!1}function d(e,n){var t=n.children,r=e.dom;n.dom=r,e.children!==t&&(r.nodeValue=t)}function s(e,n){n.dom=e.dom}function u(e,n,t,o,a,i,l){for(var d=e.length,s=n.length,u=d>s?s:d,c=0;c<u;c++){var p=n[c];p.dom&&(p=n[c]=w.directClone(p)),r(e[c],p,t,o,a,i,l)}if(d<s)for(c=u;c<s;c++){var p=n[c];p.dom&&(p=n[c]=w.directClone(p)),_.appendChild(t,j.mount(p,null,o,a,i))}else if(0===s)_.removeAllChildren(t,e,o,l);else if(d>s)for(c=u;c<d;c++)O.unmount(e[c],t,o,!1,l)}function c(e,n,t,o,a,i,l){var d,s,u,c,h,f,v,g=e.length,m=n.length,k=g-1,N=m-1,y=0,V=0;if(0===g)return void(m>0&&j.mountArrayChildren(n,t,o,a,i));if(0===m)return void _.removeAllChildren(t,e,o,l);var z=e[y],C=n[V],x=e[k],E=n[N];C.dom&&(n[V]=C=w.directClone(C)),E.dom&&(n[N]=E=w.directClone(E));e:for(;;){for(;z.key===C.key;){if(r(z,C,t,o,a,i,l),y++,V++,y>k||V>N)break e;z=e[y],C=n[V],C.dom&&(n[V]=C=w.directClone(C))}for(;x.key===E.key;){if(r(x,E,t,o,a,i,l),k--,N--,y>k||V>N)break e;x=e[k],E=n[N],E.dom&&(n[N]=E=w.directClone(E))}if(x.key!==C.key){if(z.key!==E.key)break;r(z,E,t,o,a,i,l),f=N+1,h=f<n.length?n[f].dom:null,_.insertOrAppend(t,E.dom,h),y++,N--,z=e[y],E=n[N],E.dom&&(n[N]=E=w.directClone(E))}else r(x,C,t,o,a,i,l),_.insertOrAppend(t,C.dom,z.dom),k--,V++,x=e[k],C=n[V],C.dom&&(n[V]=C=w.directClone(C))}if(y>k){if(V<=N)for(f=N+1,h=f<n.length?n[f].dom:null;V<=N;)v=n[V],v.dom&&(n[V]=v=w.directClone(v)),V++,_.insertOrAppend(t,j.mount(v,null,o,a,i),h)}else if(V>N)for(;y<=k;)O.unmount(e[y++],t,o,!1,l);else{g=k-y+1,m=N-V+1;var U=new Array(m);for(d=0;d<m;d++)U[d]=-1;var P=!1,R=0,M=0;if(m<=4||g*m<=16){for(d=y;d<=k;d++)if(u=e[d],M<m)for(s=V;s<=N;s++)if(c=n[s],u.key===c.key){U[s-V]=d,R>s?P=!0:R=s,c.dom&&(n[s]=c=w.directClone(c)),r(u,c,t,o,a,i,l),M++,e[d]=null;break}}else{var S=new Map;for(d=V;d<=N;d++)S.set(n[d].key,d);for(d=y;d<=k;d++)u=e[d],M<m&&(s=S.get(u.key),b.isUndefined(s)||(c=n[s],U[s-V]=d,R>s?P=!0:R=s,c.dom&&(n[s]=c=w.directClone(c)),r(u,c,t,o,a,i,l),M++,e[d]=null))}if(g===e.length&&0===M)for(_.removeAllChildren(t,e,o,l);V<m;)v=n[V],v.dom&&(n[V]=v=w.directClone(v)),V++,_.insertOrAppend(t,j.mount(v,null,o,a,i),null);else{for(d=g-M;d>0;)u=e[y++],b.isNull(u)||(O.unmount(u,t,o,!0,l),d--);if(P){var D=p(U);for(s=D.length-1,d=m-1;d>=0;d--)-1===U[d]?(R=d+V,v=n[R],v.dom&&(n[R]=v=w.directClone(v)),f=R+1,h=f<n.length?n[f].dom:null,_.insertOrAppend(t,j.mount(v,t,o,a,i),h)):s<0||d!==D[s]?(R=d+V,v=n[R],f=R+1,h=f<n.length?n[f].dom:null,_.insertOrAppend(t,v.dom,h)):s--}else if(M!==m)for(d=m-1;d>=0;d--)-1===U[d]&&(R=d+V,v=n[R],v.dom&&(n[R]=v=w.directClone(v)),f=R+1,h=f<n.length?n[f].dom:null,_.insertOrAppend(t,j.mount(v,null,o,a,i),h))}}}function p(e){var n,t,r,o,a,i=e.slice(0),l=[0],d=e.length;for(n=0;n<d;n++){var s=e[n];if(-1!==s)if(t=l[l.length-1],e[t]<s)i[n]=t,l.push(n);else{for(r=0,o=l.length-1;r<o;)a=(r+o)/2|0,e[l[a]]<s?r=a+1:o=a;s<e[l[r]]&&(r>0&&(i[n]=l[r-1]),l[r]=n)}}for(r=l.length,o=l[r-1];r-- >0;)l[r]=o,o=i[o];return l}function h(e){return"o"===e[0]&&"n"===e[1]}function f(e,n,t,r,o,a){if(n!==t){if(N.skipProps.has(e)||a&&"value"===e)return;if(N.booleanProps.has(e))e="autoFocus"===e?e.toLowerCase():e,r[e]=!!t;else if(N.strictProps.has(e)){var i=b.isNullOrUndef(t)?"":t;r[e]!==i&&(r[e]=i)}else if(h(e))v(e,n,t,r);else if(b.isNullOrUndef(t))r.removeAttribute(e);else if("style"===e)g(n,t,r);else if("dangerouslySetInnerHTML"===e){var l=n&&n.__html,d=t&&t.__html;l!==d&&(b.isNullOrUndef(d)||(r.innerHTML=d))}else o&&N.namespaces.has(e)?r.setAttributeNS(N.namespaces.get(e),e,t):r.setAttribute(e,t)}}function v(e,n,t,r){if(n!==t)if(N.delegatedEvents.has(e))y.handleEvent(e,n,t,r);else{var o=e.toLowerCase(),a=r[o];if(a&&a.wrapped)return;if(b.isFunction(t)||b.isNullOrUndef(t))r[o]=t;else{var i=t.event;i&&b.isFunction(i)?r[o]=function(e){i(t.data,e)}:b.throwError()}}}function g(e,n,t){var r=t.style;if(b.isString(n))return void(r.cssText=n);for(var o in n){var a=n[o];!b.isNumber(a)||N.isUnitlessNumber.has(o)?r[o]=a:r[o]=a+"px"}if(!b.isNullOrUndef(e))for(var o in e)b.isNullOrUndef(n[o])&&(r[o]="")}function m(e,n,t){"value"===e?t.value="":"style"===e?t.removeAttribute("style"):h(e)?y.handleEvent(e,n,null,t):t.removeAttribute(e)}Object.defineProperty(n,"__esModule",{value:!0});var b=t(0),k=t(3),w=t(4),N=t(8),y=t(44),j=t(9),V=t(6),O=t(11),_=t(2),z=t(12);n.patch=r,n.patchElement=a,n.patchComponent=l,n.patchText=d,n.patchVoid=s,n.patchNonKeyedChildren=u,n.patchKeyedChildren=c,n.isAttrAnEvent=h,n.patchProp=f,n.patchEvent=v,n.patchStyle=g},function(e,n,t){"use strict";function r(e){u.options.findDOMNodeEnabled||s.throwError();var t=e&&e.nodeType?e:null;return n.componentToDOMNodeMap.get(e)||t}function o(e){for(var n=0,t=m.length;n<t;n++){var r=m[n];if(r.dom===e)return r}return null}function a(e,n,t){var r={dom:e,input:n,lifecycle:t};return m.push(r),r}function i(e){for(var n=0,t=m.length;n<t;n++)if(m[n]===e)return void m.splice(n,1)}function l(e,n){if(b===n&&s.throwError(),e!==s.NO_OP){var t=o(n);if(s.isNull(t)){var r=new s.Lifecycle;s.isInvalid(e)||(e.dom&&(e=c.directClone(e)),p.hydrateRoot(e,n,r)||h.mount(e,n,r,g.EMPTY_OBJ,!1),t=a(n,e,r),r.trigger())}else{var r=t.lifecycle;r.listeners=[],s.isNullOrUndef(e)?(v.unmount(t.input,n,r,!1,!1),i(t)):(e.dom&&(e=c.directClone(e)),f.patch(t.input,e,n,r,g.EMPTY_OBJ,!1,!1)),t.input=e,r.trigger()}if(t){var l=t.input;if(l&&28&l.flags)return l.children}}}function d(e){return function(n,t){e||(e=n),l(t,e)}}Object.defineProperty(n,"__esModule",{value:!0});var s=t(0),u=t(3),c=t(4),p=t(46),h=t(9),f=t(5),v=t(11),g=t(2);n.componentToDOMNodeMap=new Map;var m=u.options.roots;n.findDOMNode=r;var b=s.isBrowser?document.body:null;n.render=l,n.createRenderer=d},function(e,n,t){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])};return function(n,t){function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(n,"__esModule",{value:!0});var o=t(10),a=t(14),i=t(0),l=t(18),d=Promise.resolve(),s=function(e){function n(n,t){var r=e.call(this,n,t)||this;return r._onComponentResolved=function(e,n){r.setState({asyncComponent:n})},r.state={asyncComponent:null},r}return r(n,e),n.prototype.componentWillMount=function(){var e=this,n=this.props.onEnter,t=this.context.router;n&&d.then(function(){n({props:e.props,router:t})});var r=this.props.getComponent;r&&d.then(function(){r({props:e.props,router:t},e._onComponentResolved)})},n.prototype.onLeave=function(e){void 0===e&&(e=!1);var n=this.props.onLeave,t=this.context.router;n&&e&&n({props:this.props,router:t})},n.prototype.onEnter=function(e){var n=e.onEnter,t=this.context.router;this.props.path!==e.path&&n&&n({props:e,router:t})},n.prototype.getComponent=function(e){var n=e.getComponent,t=this.context.router;this.props.path!==e.path&&n&&n({props:e,router:t},this._onComponentResolved)},n.prototype.componentWillUnmount=function(){this.onLeave(!0)},n.prototype.componentWillReceiveProps=function(e){this.getComponent(e),this.onEnter(e),this.onLeave(this.props.path!==e.path)},n.prototype.render=function(e){var n=e.component,t=e.children,r=l.rest(e,["component","children","path","getComponent"]),o=this.state.asyncComponent,d=n||o;return d?a.default(d,r,t):i.isArray(t)?null:t},n}(o.default);n.default=s},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.xlinkNS="http://www.w3.org/1999/xlink",n.xmlNS="http://www.w3.org/XML/1998/namespace",n.svgNS="http://www.w3.org/2000/svg",n.strictProps=new Set,n.strictProps.add("volume"),n.strictProps.add("defaultChecked"),n.booleanProps=new Set,n.booleanProps.add("muted"),n.booleanProps.add("scoped"),n.booleanProps.add("loop"),n.booleanProps.add("open"),n.booleanProps.add("checked"),n.booleanProps.add("default"),n.booleanProps.add("capture"),n.booleanProps.add("disabled"),n.booleanProps.add("readOnly"),n.booleanProps.add("required"),n.booleanProps.add("autoplay"),n.booleanProps.add("controls"),n.booleanProps.add("seamless"),n.booleanProps.add("reversed"),n.booleanProps.add("allowfullscreen"),n.booleanProps.add("novalidate"),n.booleanProps.add("hidden"),n.booleanProps.add("autoFocus"),n.booleanProps.add("selected"),n.namespaces=new Map,n.namespaces.set("xlink:href",n.xlinkNS),n.namespaces.set("xlink:arcrole",n.xlinkNS),n.namespaces.set("xlink:actuate",n.xlinkNS),n.namespaces.set("xlink:show",n.xlinkNS),n.namespaces.set("xlink:role",n.xlinkNS),n.namespaces.set("xlink:title",n.xlinkNS),n.namespaces.set("xlink:type",n.xlinkNS),n.namespaces.set("xml:base",n.xmlNS),n.namespaces.set("xml:lang",n.xmlNS),n.namespaces.set("xml:space",n.xmlNS),n.isUnitlessNumber=new Set,n.isUnitlessNumber.add("animationIterationCount"),n.isUnitlessNumber.add("borderImageOutset"),n.isUnitlessNumber.add("borderImageSlice"),n.isUnitlessNumber.add("borderImageWidth"),n.isUnitlessNumber.add("boxFlex"),n.isUnitlessNumber.add("boxFlexGroup"),n.isUnitlessNumber.add("boxOrdinalGroup"),n.isUnitlessNumber.add("columnCount"),n.isUnitlessNumber.add("flex"),n.isUnitlessNumber.add("flexGrow"),n.isUnitlessNumber.add("flexPositive"),n.isUnitlessNumber.add("flexShrink"),n.isUnitlessNumber.add("flexNegative"),n.isUnitlessNumber.add("flexOrder"),n.isUnitlessNumber.add("gridRow"),n.isUnitlessNumber.add("gridColumn"),n.isUnitlessNumber.add("fontWeight"),n.isUnitlessNumber.add("lineClamp"),n.isUnitlessNumber.add("lineHeight"),n.isUnitlessNumber.add("opacity"),n.isUnitlessNumber.add("order"),n.isUnitlessNumber.add("orphans"),n.isUnitlessNumber.add("tabSize"),n.isUnitlessNumber.add("widows"),n.isUnitlessNumber.add("zIndex"),n.isUnitlessNumber.add("zoom"),n.isUnitlessNumber.add("fillOpacity"),n.isUnitlessNumber.add("floodOpacity"),n.isUnitlessNumber.add("stopOpacity"),n.isUnitlessNumber.add("strokeDasharray"),n.isUnitlessNumber.add("strokeDashoffset"),n.isUnitlessNumber.add("strokeMiterlimit"),n.isUnitlessNumber.add("strokeOpacity"),n.isUnitlessNumber.add("strokeWidth"),n.skipProps=new Set,n.skipProps.add("children"),n.skipProps.add("childrenType"),n.skipProps.add("defaultValue"),n.skipProps.add("ref"),n.skipProps.add("key"),n.skipProps.add("checked"),n.skipProps.add("multiple"),n.delegatedEvents=new Set,n.delegatedEvents.add("onClick"),n.delegatedEvents.add("onMouseDown"),n.delegatedEvents.add("onMouseUp"),n.delegatedEvents.add("onMouseMove"),n.delegatedEvents.add("onSubmit"),n.delegatedEvents.add("onDblClick"),n.delegatedEvents.add("onKeyDown"),n.delegatedEvents.add("onKeyUp"),n.delegatedEvents.add("onKeyPress")},function(e,n,t){"use strict";function r(e,n,t,r,l){var s=e.flags;return 3970&s?i(e,n,t,r,l):28&s?d(e,n,t,r,l,(4&s)>0):4096&s?a(e,n):1&s?o(e,n):void p.throwError()}function o(e,n){var t=document.createTextNode(e.children);return e.dom=t,p.isNull(n)||b.appendChild(n,t),t}function a(e,n){var t=document.createTextNode("");return e.dom=t,p.isNull(n)||b.appendChild(n,t),t}function i(e,n,t,o,a){if(h.options.recyclingEnabled){var i=g.recycleElement(e,t,o,a);if(!p.isNull(i))return p.isNull(n)||b.appendChild(n,i),i}var d=e.flags;a=a||(128&d)>0;var s=b.documentCreateElement(e.type,a),u=e.children,m=e.props,w=e.className,N=e.ref;if(e.dom=s,p.isInvalid(u)||(p.isStringOrNumber(u)?b.setTextContent(s,u):p.isArray(u)?l(u,s,t,o,a):f.isVNode(u)&&r(u,s,t,o,a)),!p.isNull(m)){var y=!1,j=(3584&d)>0;j&&(y=k.isControlledFormElement(m));for(var V in m)v.patchProp(V,null,m[V],s,a,y);j&&k.processElement(d,e,s,m,!0,y)}return null!==w&&(a?s.setAttribute("class",w):s.className=w),p.isNull(N)||c(s,N,t),p.isNull(n)||b.appendChild(n,s),s}function l(e,n,t,o,a){for(var i=0,l=e.length;i<l;i++){var d=e[i];p.isInvalid(d)||(d.dom&&(e[i]=d=f.directClone(d)),r(e[i],n,t,o,a))}}function d(e,n,t,o,a,i){if(h.options.recyclingEnabled){var l=g.recycleComponent(e,t,o,a);if(!p.isNull(l))return p.isNull(n)||b.appendChild(n,l),l}var d,c=e.type,f=e.props||b.EMPTY_OBJ,v=e.ref;if(i){var k=b.createClassComponentInstance(e,c,f,o,a,t),w=k._lastInput;k._vNode=e,e.dom=d=r(w,null,t,k._childContext,a),p.isNull(n)||b.appendChild(n,d),s(e,v,k,t),k._updating=!1,h.options.findDOMNodeEnabled&&m.componentToDOMNodeMap.set(k,d)}else{var w=b.createFunctionalComponentInput(e,c,f,o);e.dom=d=r(w,null,t,o,a),e.children=w,u(v,d,t),p.isNull(n)||b.appendChild(n,d)}return d}function s(e,n,t,r){n&&(p.isFunction(n)?n(t):p.throwError());var o=!p.isUndefined(t.componentDidMount),a=h.options.afterMount;!o&&p.isNull(a)||r.addListener(function(){t._updating=!0,a&&a(e),o&&t.componentDidMount(),t._updating=!1})}function u(e,n,t){e&&(p.isNullOrUndef(e.onComponentWillMount)||e.onComponentWillMount(),p.isNullOrUndef(e.onComponentDidMount)||t.addListener(function(){return e.onComponentDidMount(n)}))}function c(e,n,t){if(p.isFunction(n))t.addListener(function(){return n(e)});else{if(p.isInvalid(n))return;p.throwError()}}Object.defineProperty(n,"__esModule",{value:!0});var p=t(0),h=t(3),f=t(4),v=t(5),g=t(19),m=t(6),b=t(2),k=t(12);n.mount=r,n.mountText=o,n.mountVoid=a,n.mountElement=i,n.mountArrayChildren=l,n.mountComponent=d,n.mountClassComponentCallbacks=s,n.mountFunctionalComponentCallbacks=u,n.mountRef=c},function(e,n,t){e.exports=t(35).default,e.exports.default=e.exports},function(e,n,t){"use strict";function r(e,n,t,r,l){var d=e.flags;28&d?a(e,n,t,r,l):3970&d?i(e,n,t,r,l):4097&d&&o(e,n)}function o(e,n){s.isNull(n)||f.removeChild(n,e.dom)}function a(e,n,t,o,a){var i=e.children,l=e.flags,d=4&l,c=e.ref,v=e.dom;if(a||(d?i._unmounted||(i._blockSetState=!0,s.isNull(u.options.beforeUnmount)||u.options.beforeUnmount(e),s.isUndefined(i.componentWillUnmount)||i.componentWillUnmount(),c&&!a&&c(null),i._unmounted=!0,u.options.findDOMNodeEnabled&&h.componentToDOMNodeMap.delete(i),r(i._lastInput,null,i._lifecycle,!1,a)):(s.isNullOrUndef(c)||s.isNullOrUndef(c.onComponentWillUnmount)||c.onComponentWillUnmount(v),r(i,null,t,!1,a))),n){var g=i._lastInput;s.isNullOrUndef(g)&&(g=i),f.removeChild(n,v)}u.options.recyclingEnabled&&!d&&(n||o)&&p.poolComponent(e)}function i(e,n,t,r,o){var a=e.dom,i=e.ref,h=e.props;i&&!o&&d(i);var v=e.children;if(s.isNullOrUndef(v)||l(v,t,o),!s.isNull(h))for(var g in h)null!==h[g]&&c.isAttrAnEvent(g)&&(c.patchEvent(g,h[g],null,a),h[g]=null);s.isNull(n)||f.removeChild(n,a),u.options.recyclingEnabled&&(n||r)&&p.poolElement(e)}function l(e,n,t){if(s.isArray(e))for(var o=0,a=e.length;o<a;o++){var i=e[o];!s.isInvalid(i)&&s.isObject(i)&&r(i,null,n,!1,t)}else s.isObject(e)&&r(e,null,n,!1,t)}function d(e){if(s.isFunction(e))e(null);else{if(s.isInvalid(e))return;s.throwError()}}Object.defineProperty(n,"__esModule",{value:!0});var s=t(0),u=t(3),c=t(5),p=t(19),h=t(6),f=t(2);n.unmount=r,n.unmountComponent=a,n.unmountElement=i},function(e,n,t){"use strict";function r(e,n,t,r,o,a){512&e&&i.processInput(n,t,r,o,a),2048&e&&l.processSelect(n,t,r,o,a),1024&e&&d.processTextarea(n,t,r,o,a)}function o(e){return e.type&&i.isCheckedType(e.type)?!a.isNullOrUndef(e.checked):!a.isNullOrUndef(e.value)}Object.defineProperty(n,"__esModule",{value:!0});var a=t(0),i=t(47),l=t(48),d=t(49);n.processElement=r,n.isControlledFormElement=o},function(e,n,t){"use strict";n.__esModule=!0;n.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},n.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e},n.stripPrefix=function(e,n){return 0===e.indexOf(n)?e.substr(n.length):e},n.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},n.parsePath=function(e){var n=e||"/",t="",r="",o=n.indexOf("#");-1!==o&&(r=n.substr(o),n=n.substr(0,o));var a=n.indexOf("?");return-1!==a&&(t=n.substr(a),n=n.substr(0,a)),n=decodeURI(n),{pathname:n,search:"?"===t?"":t,hash:"#"===r?"":r}},n.createPath=function(e){var n=e.pathname,t=e.search,r=e.hash,o=encodeURI(n||"/");return t&&"?"!==t&&(o+="?"===t.charAt(0)?t:"?"+t),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,n,t){e.exports=t(36).default,e.exports.default=e.exports},function(e,n,t){"use strict";function r(e,n,t){return i.createVNode(2,"a",e,n,t)}function o(e,n){var t,o=n.router,i=e.activeClassName,d=e.activeStyle,s=e.className,u=e.onClick,c=e.children,p=e.to,h=a(e,["activeClassName","activeStyle","className","onClick","children","to"]);return s&&(t=s),o?(h.href=l.isBrowser?o.createHref({pathname:p}):o.location.baseUrl?o.location.baseUrl+p:p,o.location.pathname===p&&(i&&(t=(s?s+" ":"")+i),d&&(h.style=l.combineFrom(e.style,d))),h.onclick=function(e){0!==e.button||e.ctrlKey||e.altKey||e.metaKey||e.shiftKey||(e.preventDefault(),"function"==typeof u&&u(e),o.push(p,e.target.textContent))},r(t,c,h)):(h.href=p,h.onClick=u,r(t,c,h))}var a=this&&this.__rest||function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var o=0,r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&(t[r[o]]=e[r[o]]);return t};Object.defineProperty(n,"__esModule",{value:!0});var i=t(1),l=t(0);n.default=o},function(e,n,t){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])};return function(n,t){function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(n,"__esModule",{value:!0});var o=t(10),a=function(e){function n(n,t){return e.call(this,n,t)||this}return r(n,e),n.prototype.getChildContext=function(){return{router:this.props.router||{location:{baseUrl:this.props.baseUrl,pathname:this.props.location}}}},n.prototype.render=function(e){return e.matched},n}(o.default);n.default=a},function(e,n,t){"use strict";function r(e,n){var t=s.getURLString(n);return o(l.toArray(e),encodeURI(t),"/")}function o(e,n,t,r){void 0===n&&(n="/"),void 0===t&&(t="/"),void 0===r&&(r=!1);var d=l.isArray(e)?s.flatten(e):l.toArray(e),u=n.split("?"),c=u[0],p=void 0===c?"/":c,h=u[1],f=void 0===h?"":h,v=s.mapSearchParams(f);d.sort(s.pathRankSort);for(var g=0,m=d.length;g<m;g++){var b=d[g],k=b.props||s.emptyObject,w=k.from||k.path||"/",N=t+s.toPartialURL(w,t).replace(/\/\//g,"/"),y=s.isEmpty(k.children),j=a(y,N,p);if(j){var V=k.children;if(k.from&&(r=k.to),V){var O=o(V,n,N,r);if(O){if(O.redirect)return{location:N,redirect:O.redirect};V=O.matched;var _=V.props.params;for(var z in _)v[z]=_[z]}else V=null}return{location:N,redirect:r,matched:i.default.cloneVNode(b,{params:l.combineFrom(v,j.params),children:V})}}}}function a(e,n,t){var r=n+"|"+e,o=u.get(r);if(void 0===o){var a=[];o={pattern:d.default(n,a,{end:e}),keys:a},u.set(r,o)}var i=o.pattern.exec(t);if(!i)return null;for(var l=i[0],c=Object.create(null),p=1,h=i.length;p<h;p+=1)c[o.keys[p-1].name]=s.decode(i[p]);return{path:""===l?"/":l,params:c}}Object.defineProperty(n,"__esModule",{value:!0});var i=t(1),l=t(0),d=t(53),s=t(18),u=new Map;n.default=r,n.matchPath=a},function(e,n,t){"use strict";function r(e){return"string"!=typeof e?e:decodeURIComponent(e)}function o(e){return!e||!(v.isArray(e)?e:Object.keys(e)).length}function a(e){var n=[];return f(e,n),n}function i(e){return v.isString(e)?e:e.pathname+e.search}function l(e){if(""===e)return{};for(var n=Object.create(null),t=e.split("&"),r=0,o=t.length;r<o;r++){var a=t[r],i=a.split("=").map(c).map(decodeURIComponent),l=i[0],d=i[1];n[l]?(n[l]=v.isArray(n[l])?n[l]:[n[l]],n[l].push(d)):n[l]=d}return n}function d(e,n){return 0===e.indexOf(n)?e.substr(n.length):e}function s(e,n){var t={};for(var r in e)n.indexOf(r)<0&&(t[r]=e[r]);return t}function u(e,t){var r=e.props||n.emptyObject,o=t.props||n.emptyObject;return h(o.path)-h(r.path)||(o.path&&r.path?o.path.length-r.path.length:0)}function c(e,n){return decodeURIComponent(0|n?e:e.replace("[]",""))}function p(e){return e.replace(/(^\/+|\/+$)/g,"")}function h(e){return void 0===e&&(e=""),(p(e).match(/\/+/g)||"").length}function f(e,n){for(var t=0,r=e.length;t<r;t++){var o=e[t];v.isArray(o)?f(o,n):n.push(o)}}Object.defineProperty(n,"__esModule",{value:!0});var v=t(0);n.emptyObject={},n.decode=r,n.isEmpty=o,n.flatten=a,n.getURLString=i,n.mapSearchParams=l,n.toPartialURL=d,n.rest=s,n.pathRankSort=u},function(e,n,t){"use strict";function r(e,n,t,r){var o=e.type,a=u.get(o);if(!l.isUndefined(a)){var i=e.key,s=null===i?a.nonKeyed:a.keyed.get(i);if(!l.isUndefined(s)){var c=s.pop();if(!l.isUndefined(c))return d.patchElement(c,e,null,n,t,r,!0),e.dom}}return null}function o(e){var n=e.type,t=e.key,r=u.get(n);if(l.isUndefined(r)&&(r={keyed:new Map,nonKeyed:[]},u.set(n,r)),l.isNull(t))r.nonKeyed.push(e);else{var o=r.keyed.get(t);l.isUndefined(o)&&(o=[],r.keyed.set(t,o)),o.push(e)}}function a(e,n,t,r){var o=e.type,a=s.get(o);if(!l.isUndefined(a)){var i=e.key,u=null===i?a.nonKeyed:a.keyed.get(i);if(!l.isUndefined(u)){var c=u.pop();if(!l.isUndefined(c)){var p=e.flags;if(!d.patchComponent(c,e,null,n,t,r,4&p,!0))return e.dom}}}return null}function i(e){var n=e.ref;if(!n||!(n.onComponentWillMount||n.onComponentWillUnmount||n.onComponentDidMount||n.onComponentWillUpdate||n.onComponentDidUpdate)){var t=e.type,r=e.key,o=s.get(t);if(l.isUndefined(o)&&(o={keyed:new Map,nonKeyed:[]},s.set(t,o)),l.isNull(r))o.nonKeyed.push(e);else{var a=o.keyed.get(r);l.isUndefined(a)&&(a=[],o.keyed.set(r,a)),a.push(e)}}}Object.defineProperty(n,"__esModule",{value:!0});var l=t(0),d=t(5),s=new Map,u=new Map;n.recycleElement=r,n.poolElement=o,n.recycleComponent=a,n.poolComponent=i},function(e,n,t){"use strict";function r(e,n){return n.key=e,n}function o(e,n){return p.isNumber(e)&&(e="."+e),p.isNull(n.key)||"."===n.key[0]?r(e,n):n}function a(e,n){return n.key=e+n.key,n}function i(e,n,t,o){for(var l=e.length;t<l;t++){var d=e[t],s=o+"."+t;p.isInvalid(d)||(p.isArray(d)?i(d,n,0,s):(p.isStringOrNumber(d)?d=h.createTextVNode(d,null):(h.isVNode(d)&&d.dom||d.key&&"."===d.key[0])&&(d=h.directClone(d)),d=p.isNull(d.key)||"."===d.key[0]?r(s,d):a(o,d),n.push(d)))}}function l(e){var n;!0===e.$?e=e.slice():e.$=!0;for(var t=0,r=e.length;t<r;t++){var a=e[t];if(p.isInvalid(a)||p.isArray(a)){var l=(n||e).slice(0,t);return i(e,l,t,""),l}p.isStringOrNumber(a)?(n||(n=e.slice(0,t)),n.push(o(t,h.createTextVNode(a,null)))):h.isVNode(a)&&null!==a.dom||p.isNull(a.key)&&0==(64&a.flags)?(n||(n=e.slice(0,t)),n.push(o(t,h.directClone(a)))):n&&n.push(o(t,h.directClone(a)))}return n||e}function d(e){return p.isArray(e)?l(e):h.isVNode(e)&&null!==e.dom?h.directClone(e):e}function s(e,n,t){3970&e.flags&&(p.isNullOrUndef(t)&&!p.isNullOrUndef(n.children)&&(e.children=n.children),p.isNullOrUndef(n.className)||(e.className=n.className,delete n.className)),n.ref&&(e.ref=n.ref,delete n.ref),p.isNullOrUndef(n.key)||(e.key=n.key,delete n.key)}function u(e){return"svg"===e?128:"input"===e?512:"select"===e?2048:"textarea"===e?1024:"media"===e?256:2}function c(e){var n=e.props,t=e.children;if(28&e.flags){var r=e.type,o=r.defaultProps;if(!p.isNullOrUndef(o))if(n)for(var a in o)p.isUndefined(n[a])&&(n[a]=o[a]);else n=e.props=o;p.isString(r)&&(e.flags=u(r),n&&n.children&&(e.children=n.children,t=n.children))}n&&(s(e,n,t),p.isInvalid(n.children)||(n.children=d(n.children))),p.isInvalid(t)||(e.children=d(t))}Object.defineProperty(n,"__esModule",{value:!0});var p=t(0),h=t(4);n.normalizeVNodes=l,n.getFlagsForElementVnode=u,n.normalize=c},function(e,n,t){"use strict";var r=function(){};e.exports=r},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Besluit=void 0;var r=t(1);n.Besluit=function(){return(0,r.createVNode)(2,"article",null,[(0,r.createVNode)(2,"h2",null,"Besluit"),(0,r.createVNode)(2,"p",null,"Uit het werk kunnen we besluiten dat de hiërarchie van de Romeinen goed in elkaar zat aangezien iedereen zijn plaats kende en er respect en aanzien was. Door deze organisatie was het Romeinse leger een van de succesvolste legers uit die tijd. Wanneer we het huidige leger vergelijken met het Romeinse stellen we vast dat onze hiërarchie een zeer uitgebreide versie is van die van het Romeinse leger. Er zijn meer onderverdelingen en meer componenten dan bij de Romeinen, maar dit is te wijten aan technologische en wetenschappelijke vooruitgang. Zo zijn er nu vliegtuigen, tanks, jeeps en vliegdekschepen wat ervoor zorgt dat iedere persoon binnen het leger zijn specifieke functie heeft en er dus meer verdeeldheid is. Op het vlak van bewapening waren de Romeinen ook goed voorzien. Ze waren veel bezig met het ontwikkelen van nieuwe wapens om hun vijanden te kunnen verrassen. Hun wapens waren efficiënt en doeltreffend waardoor ze vele veldslagen hebben gewonnen. Wanneer we het Romeinse leger met het huidige vergelijken stellen we vast dat alles is veranderd. Dit is weer te wijten aan technologische en wetenschappelijke vooruitgang. In huidige tijden wordt er niet meer gestreden met zwaarden, schilden en speren, maar met machinegeweren, langeafstandsraketten en computers. De Romeinen waren ongetwijfeld de grondleggers van verscheidene legers die later zijn ontstaan, maar sporen van hun wapens zijn in het huidige leger niet meer te vinden. Het Romeinse leger was een van de succesvolste legers uit de geschiedenis. Dit is te wijten aan hun ijzersterke discipline en goed bedachte tactieken en aanvalsplannen. De Romeinen begrepen ook zeer goed dat een veldslag niet enkel fysiek werd gestreden, maar ook mentaal. Ze wisten goed hoe ze het moreel bij hun troepen hoog moesten houden terwijl ze dat van de vijand verzwakten. Het verlies van een veldslag vond zijn oorzaak meestal bij slecht leiderschap. De tactieken van het huidige leger zijn zeer sterk veranderd aangezien alles vanop een langere afstand gebeurt en er meer en meer via robots wordt gewerkt. Vroeger waren bijna alle gevechten man tot man gevechten waardoor men tactieken kon toepassen zoals bijvoorbeeld: ruiters langs de flanken laten inkomen. Tegenwoordig heeft dit geen nut meer aangezien het aantal soldaten waarmee men oorlog voert sterk verminderd is.")])}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Bewapening=void 0;var r=t(1);n.Bewapening=function(){return(0,r.createVNode)(2,"article",null,[(0,r.createVNode)(2,"h2",null,"Hoe was de bewapening bij de Romeinen"),(0,r.createVNode)(2,"p",null,"Gedurende enkele eeuwen tot op de dag van vandaag ontstond er een voortdurende ontwikkeling van bewapening. Dit heeft zich kunnen verwezenlijken door de technologische vooruitgang met als gevolg dat de kracht van wapens aanzienlijk is vergroot. Maar om de evolutie van de bewapening waar te nemen, moeten we terugblikken ten tijde van het Romeinse imperium waar de basis werd gelegd."),(0,r.createVNode)(2,"h3",null,"Draagbare bewapening"),(0,r.createVNode)(2,"p",null,["Vele kinderen of jongeren lezen weleens strips zoals Asterix en Obelix of moeten op school enkele werkjes maken omtrent de Romeinse beschaving. Hierdoor krijgen ze een bepaald beeld over het Romeinse leven en met welke wapens de soldaten te werk gingen. Het algemene beeld die wij hiervan hebben, is dat elke soldaat een aanvalswapen en een verdedigingswapen ter beschikking had en dat iedere soldaat voorzien werd van stoere vechterskledij. Hierbij zijn vaak het zwaard en de speer de belangrijkste aanvalswapens en ter verdediging gebruikten ze het schild. Om zich te beschermen droegen ze vaak een harnas. Of deze algemene voorstelling altijd waar is, wordt in dit hoofdstuk onderzocht.",(0,r.createVNode)(2,"p"),"Bewapening bij Romeinse legionairs hielden telkens verband met de rang waartoe ze behoorden. Bewapening is net zoals de rangen in verschillende groepen te verdelen. Beginnen doen we met de verschillende tijdperken gaande van 105 v.Chr. tot einde 2de eeuw. Hierbij wordt een nieuw tijdperk telkens ingeleid bij ontstaan van nieuwe en belangrijke bewapening.",(0,r.createVNode)(2,"p"),"Bij de eerste generatie was de gladius (= zwaard) het belangrijkste aanvalswapen. Deze werd altijd gebruikt in combinatie met de aspis (= schild) waarmee ze zich konden verdedigen. In het begin had de gladius een korte lengte, geïnspireerd op het model van de Griekse xiphos. Het schild of de zogenaamde aspis werd vervaardigd uit hout met telkens een bronzen rand ter versterking. De vorm van het schild was rond en relatief groot ter vergelijking met wat er nog zou volgen. Ook hierbij hebben de Romeinen zich weer laten inspireren door de Grieken. Bij de volgende generatie wilden de Romeinen hun eigen stijl creëren waarin Griekse, Keltische en Italische invloeden verwerkt werden. Zo creëerden ze de scutum als vervanging van de aspis. Het had een ovale vorm en beschikte over tal van voordelen. Zo is het schild duurzamer en lichter dan de vorige en het beschikte over een schildknop (= metalen bol die zich centraal op het schild bevond). De functie van die knop was meer schade toe brengen aan de vijand. De aspis werd altijd in de linkerhand gedragen waardoor ze het zwaard in de rechterhand konden leggen. De rede hiervoor was dat de meeste Romeinse soldaten rechtshandig waren waardoor ze meer kracht hadden in hun rechterarm wat noodzakelijk was om bruuske bewegingen te maken met de gladius. Enige tijd later gingen ze gebruik maken van een iets langer zwaard wat overgenomen was van de vijand tijdens de Punische oorlogen. Diezelfde generatie ging zich ook richten op de ontwikkeling van stootsperen (= eerste versie speren). Deze hadden ongeveer dezelfde functie als het zwaard.",(0,r.createVNode)(2,"p"),(0,r.createVNode)(2,"p"),"Het enige verschil was dat ze nog langer waren. Ze waren in het begin niet bedoeld om weg te gooien in de richting van de vijand. Stootsperen werden gebruikt door de hastati (= legionarii van het eerste manipel). Uiteindelijk werd de stootspeer minder gebruikt door de legionairs en evolueerde men naar het ontwikkelen van een lichtere werpspeer nl de pilum. Dit resulteerde in een nieuwe generatie. Elke legatus beschikte over 2 pila waardoor ze bij de start van een gevecht de vijand onmiddellijk konden verzwakken. De pilum was zelfs zo gemaakt dat de punt van de speer bij botsing krom ging staan of afbrak waardoor de vijand de speer niet kon hergebruiken. Stel dat de pilum in een schild belandde, dan was het gevolg dat de zware achterkant van de speer naar beneden zakte waardoor het onmogelijk was om er verder mee rond te lopen. Hierdoor was de vijand vaak genoodzaakt om zonder schild verder te vechten.",(0,r.createVNode)(2,"p"),"In de 3de eeuw kwam er opnieuw een opvallende vooruitgang, maar ditmaal op het gebied van verdediging. De bekende scutum werd aangepast en zo ontstond de spiculum. Het was een vlak schild, nog lichter en net zoals de scutum met een slagknop in het midden.",(0,r.createVNode)(2,"p"),"De bewapening van de hulptroepen is ook op te delen in enkele groepen. Tijdens de eerste jaren van de equitatus werd de gladius gebruikt om de vijand aan te vallen vanop het paard. Doordat het zwaard kort was, maakten ze kans om snel van het paard te vallen. In de loop van de 3de eeuw was men erin geslaagd een langere versie van de gladius te creëren nl de spatha. De sagittarii maken gebruik van de sagitta (= pijlenboog). De gebogen vorm van de sagitta werd gevormd door begin en einde aan te spannen met een stevige, strakke draad. Hiermee konden ze hun pijlen over een grote afstand schieten. Tot slot hanteren de funditores de funda. Dit is een slinger waarin ze loden kogels legde om die vervolgens naar de vijand te gooien.",(0,r.createVNode)(2,"p"),"Uit al deze gegevens weten we dat het algemene beeld grotendeels juist is. Maar je kan onmogelijk besluiten dat je met dat beeld alles weet over de bewapening van Romeinse soldaten. Naast het zwaard, de speer en het schild waren er nog tal van andere aanvals- en verdedigingswapens die gebruikt werden tijdens de gevechten ten tijde van de Romeinen."]),(0,r.createVNode)(2,"p",null,(0,r.createVNode)(2,"table","bewapening-legion-table",[(0,r.createVNode)(2,"thead",null,(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"th",null,"Bewapening legionairs"),(0,r.createVNode)(2,"th",null,"aanvalswapen"),(0,r.createVNode)(2,"th",null,"verdedingingswapen"),(0,r.createVNode)(2,"th")])),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"1ste generatie"),(0,r.createVNode)(2,"td",null,"gladius"),(0,r.createVNode)(2,"td",null,"aspia"),(0,r.createVNode)(2,"td",null,"Generaties gaande vanaf ± 3de eeuw v.Chr. – 3de eeuw",{rowspan:"4"})]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"2de generatie"),(0,r.createVNode)(2,"td",null,"hasta + gladius"),(0,r.createVNode)(2,"td",null,"scutum")]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"3de generatie"),(0,r.createVNode)(2,"td",null,"pilum + gladius"),(0,r.createVNode)(2,"td",null,"scutum")]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"4de generatie"),(0,r.createVNode)(2,"td",null,"spatha"),(0,r.createVNode)(2,"td",null,"spiculum")])])),(0,r.createVNode)(2,"p",null,(0,r.createVNode)(2,"table","bewapening-legion-table",[(0,r.createVNode)(2,"thead",null,(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"th",null,"Bewapening hulptroepen"),(0,r.createVNode)(2,"th",null,"aanvalswapens"),(0,r.createVNode)(2,"th",null,"verdedigingswapens")])),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"equitatus"),(0,r.createVNode)(2,"td",null,"spatha"),(0,r.createVNode)(2,"td",null,"Verdediging komt grotendeels overeen met die van de legionairs",{rowspan:"3"})]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"sagittarii"),(0,r.createVNode)(2,"td",null,"sagitta")]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"funditores"),(0,r.createVNode)(2,"td",null,"funda")])])),(0,r.createVNode)(2,"p",null,"Aangezien er weinig betrouwbare bronnen zijn over de exacte data ’s i.v.m. het ontstaan van reeds vermelde bewapening, werd de chronologische volgorde van het ontstaan weergegeven a.d.h.v. generaties."),(0,r.createVNode)(2,"h3",null,"Oorlogstuigen"),(0,r.createVNode)(2,"p",null,"Tenslotte bespreken we in dit hoofdstuk de Romeinse oorlogstuigen aangezien het een belangrijk aspect was van de gevechten. Hierbij gaan we een opdeling maken tussen de tormenta (= aanvalswapens) en enkele andere oorlogsvoertuigen ter verdediging."),(0,r.createVNode)(2,"h4",null,"Aanvalswapens"),(0,r.createVNode)(2,"p",null,"De aanvalswapens waren veel krachtiger dan degene die ze op zak droegen. De bekendste aanvalsmachines waren de catapultae (= katapulten), onder te verdelen in enkele categorieën. Ze werden gebruikt om projectielen weg te schieten m.b.v. mechanische energie. De eerste katapulten schoten hun pijlen in bijna horizontale richting waardoor de afstand die ze konden afleggen niet al te succesvol was. De Romeinse ingenieurs van die tijd gingen dan zoeken naar methodes om het reeds vermelde probleem op te lossen. Hieruit ontstond de ballista. Deze katapult had tussen de 2 horizontaal schuin geplaatste balken een gespannen touw. Onder het touw bevond zich een halve cilinder waarin het projectiel werd gelegd. Deze halve cilinder werd altijd naar boven gericht en de hoek waarin het zich bevond konden ze bijsturen indien nodig. Het was dus niet zo dat ballista’s een vaste hoek meekregen zoals bij de eerste versies van de katapulten. Door die regelbare hoek konden ze hun pijlen over een afstand van 400 meter schieten. Net zoals bij de oudste katapulten waren er veel soldaten (±4) nodig om het in gebruik te kunnen nemen. Daarom zochten de ingenieurs nog steeds naar een verbeterde versie. De ingenieurs plaatsten dit nadeel centraal in hun volgende ontwerpen waardoor de scorpiones (kruisboog op voet) waren ontstaan. Het waren kleine katapulten die door 1 man gedragen konden worden. Ze bestonden uit een ijzeren boog waartussen een snaar werd gespannen. De projectielen die ze konden afvuren waren houten spiesen van 67cm. Na de scorpiones ontwikkelde men de cheioballistra die beschikte over metalen frames wat veel sterker was dan voordien. De onager was de laatste hervorming van de katapult en werd algemeen in gebruik genomen rond de 4de eeuw."),(0,r.createVNode)(2,"p",null,"Deze had een totaal andere werkwijze dan de vorige. Het was een heel groot en zwaar machine bedoeld om grote projectielen naar de vijand te werpen. Dergelijke projectielen waren meestal stenen. Het opvallendste kenmerk van de onager was dat er opnieuw vele soldaten nodig waren om de katapult in gebruik te nemen en dit was juist wat men bij de ontwikkeling van de katapult wilde tegengaan."),(0,r.createVNode)(2,"h3",null,"Verdedigingswapens"),(0,r.createVNode)(2,"p",null,["De verdedigingsmachines waren net zoals de aanvalsmachines krachtiger in vergelijking met wat de soldaten bij zich droegen. U zal telkens een korte beschrijving krijgen over enkele oorlogstuigen die ter verdediging werden gebruikt.",(0,r.createVNode)(2,"p"),"Beginnen doen we met de plutei, een halfcirkelvormig schild op wielen die veel weerstand bood. Vervolgens was er de testudo. Deze was net zoals de plutei een bescherming op wielen (kan ook zonder wielen). Maar het verschil was dat bij de testudo schilden aan elkaar werden gehecht die ze dan als afdak gebruikten.",(0,r.createVNode)(2,"p"),"Tot slot bestond er een machine die zowel bij de aanvals- als bij de verdedigingswapens zou kunnen horen, nl de tures ambulatoriae. Het was een houten toren op wielen waarin ze konden schuilen en op die manier konden ze ongeschonden de vijand naderen. Zo’n toren telde enkele verdiepingen en had telkens een valluik per verdiep. Dit gaf hen de kans om over de muren te geraken van de vijand. Helemaal onderaan werd een stormram ingebouwd en deze had als functie de poorten van het vijandelijke gebied te doorbreken.",(0,r.createVNode)(2,"p")]),(0,r.createVNode)(2,"table","bewapening-legion-table",[(0,r.createVNode)(2,"thead",null,(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"th",null,"Oorlogstuigen"),(0,r.createVNode)(2,"th",null,"wapens")])),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"aanvalswapens (= tormenta)"),(0,r.createVNode)(2,"td",null,"catapultae")]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td"),(0,r.createVNode)(2,"td",null,"Ballistae")]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td"),(0,r.createVNode)(2,"td",null,"Scorpiones")]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td"),(0,r.createVNode)(2,"td",null,"cheioballistra")]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td"),(0,r.createVNode)(2,"td",null,"onager")]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"verdedinginswapens"),(0,r.createVNode)(2,"td",null,"Plutei")]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td"),(0,r.createVNode)(2,"td",null,"testudo")]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"combinatiewapen"),(0,r.createVNode)(2,"td",null,"Tures ambulatoriae")])]),(0,r.createVNode)(2,"h3",null,"Vergelijking"),(0,r.createVNode)(2,"p",null,"Als we een vergelijking maken van de Romeinse bewapening t.o.v. de huidige, dan kunnen we een zeer sterke evolutie vaststellen voortgekomen uit de wetenschappelijke vooruitgang die men doorheen de jaren boekte. Ze hebben zich altijd willen verbeteren in het maken van machines die projectielen konden afschieten. Zo werd de katapult omgevormd tot een lange afstandsraket. Men ontwikkelde zelfs een systeem om zwaarden te vervangen door machines die kogels konden afvuren.")])}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Bronnen=void 0;var r=t(1);n.Bronnen=function(){return(0,r.createVNode)(2,"article",null,[(0,r.createVNode)(2,"h2",null,"Bronnen"),(0,r.createVNode)(2,"h3","bron","Boeken"),(0,r.createVNode)(2,"p",null,[(0,r.createVNode)(2,"ul",null,[(0,r.createVNode)(2,"li",null,"Commentarii de bello Gallico, VII, LXIX"),(0,r.createVNode)(2,"li",null,"Van Gelder, J. (1952) Latijnse geschiedschrijvers. Bloemlezing uit de werken van Sallustius, Caesar, Livius en Tacitus. Haarlem: Spaarnestad"),(0,r.createVNode)(2,"li",null,"Harpur, J. (2007) Guerriers: Les grands héros de l’histoire. MILAN: Toulouse"),(0,r.createVNode)(2,"li",null,"Van Daele, B. (2003) Het Romeinse Leger. Davidsfonds: Leuven"),(0,r.createVNode)(2,"li",null,"Goldsworthy, A. (2017) Romeinse legioenen. Omniboek: Utrecht"),(0,r.createVNode)(2,"li",null,"Rodgers, N. (2012) Het Romeinse Rijk. Veltman: Utrecht"),(0,r.createVNode)(2,"li",null,"Anoniem. (2015). De Veldslagen, Het Pop-Upboek. Tielt: Lannoo."),(0,r.createVNode)(2,"li",null,"Warry, W. (1981). Oorlogvoering in de klassieke wereld. Hemond: Helmond."),(0,r.createVNode)(2,"li",null,"Dando-Collins, S. (2010). Legions of Rome: The Definitive History of Every Imperial Roman Legion. Londen: Quercus Publishing."),(0,r.createVNode)(2,"li",null,"Feugere, M. (2002). The Weapons of the Romans. United Kingdom: The History Press.")]),(0,r.createVNode)(2,"h3","bron","Mondeling"),(0,r.createVNode)(2,"p",null,"Mondelinge bron geleverd door Kolonel SBH Marc Alexander (Hoogleraar aan de KMS)"),(0,r.createVNode)(2,"h3","bron","Websites"),(0,r.createVNode)(2,"p",null,(0,r.createVNode)(2,"ul",null,[(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Goede keizers, slechte keizers",{href:"https://marcaur.wordpress.com/2015/03/20/de-vijf-grootste-overwinningen-van-de-romeinen-longread/"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"militair.net",{href:"http://www.militair.net/Oorlogen/Romeinse%20oorlogen/Slag%20bij%20Teutoburgerwoud/"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"4 opmerkelijke veldslagen uit de Romeinse geschiedenis",{href:"http://www.isgeschiedenis.nl/nieuws/4-opmerkelijke-veldslagen-romeinse-geschiedenis/"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Beleg van Alesia",{href:"https://nl.wikipedia.org/wiki/Beleg%20van%20Alesia"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Waar lag Alésia?",{href:"https://www.kunstgeografie.nl/henv/helden.alesia.slag.htm"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"de geschiedenis van Alesia",{href:"http://www.cenens.be/alesia/omgeving.html"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Drie grote veldslagen uit de Romeinse tijd",{href:"https://plazilla.com/page/4295028913/drie-grote-veldslagen-uit-de-romeinse-tijd"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Slag bij het Teutoburgerwoud",{href:"https://nl.wikipedia.org/wiki/Slag_bij_het_Teutoburgerwoud"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Slag bij het Teutoburgerwoud: Varus loopt in een Germaanse hinderlaag",{href:"http://www.isgeschiedenis.nl/militaire-confrontaties/slag-bij-het-teutoburgerwoud-varus-loopt-in-een-germaanse-hinderlaag/"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Varusslag: 2000 jaar geleden",{href:"https://www.historischecartografie.nl/nieuws/2009/11/varusslag-2000-jaar-geleden/"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"De Varusslag in 9 n.Chr.",{href:"http://www.noviomagus.info/varusslag.htm"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Publius Quinctilius Varus",{href:"https://nl.wikipedia.org/wiki/Publius_Quinctilius_Varus"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Tactieken",{href:"http://www.legioxi.be/educatief/tactieken (open veldslag)"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Het Romeinse leger",{href:"http://www.klassiekevertalingen.nl/cultuur/leger.htm"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Hulptroepen",{href:"http://users.telenet.be/phoenica/hulptroepen.htm"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"De bewapening van de Romeinse legionair",{href:"http://romeinen.info/de-bewapening-van-de-romeinse-legionair"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Verdedigingswerken en belegeringsoorlog",{href:"http://users.skynet.be/veni_vidi_vici/bestorming.html"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Weapons",{href:"http://www.primaryhomeworkhelp.co.uk/romans/weapons.html"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Tools of War",{href:"https://romanmilitary.net/tools/"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Ancient roman military, weapons and spies",{href:"http://factsanddetails.com/world/cat56/sub368/item2055.html"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Weapons & Tactics",{href:"https://www.the-romans.co.uk/weapons.htm"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"Organization of the Roman Imperial Legion",{href:"http://www.unrv.com/military/legion.php"})),(0,r.createVNode)(2,"li",null,(0,r.createVNode)(2,"a",null,"The Roman Army",{href:"http://www.roman-empire.net/army/army.html"}))]))])])}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Inleiding=void 0;var r=t(1);n.Inleiding=function(){return(0,r.createVNode)(2,"article",null,[(0,r.createVNode)(2,"h2",null,"Inleiding"),(0,r.createVNode)(2,"p",null,"Wij hebben beslist om ons werk over het Romeinse leger te beginnen met de onderverdeling van het leger. Hierdoor krijg je al een inzicht in hoe de hiërarchie was ten tijde van de Romeinen. Hierna zijn wij dieper ingegaan op de bewapening van de Romeinen zodat je goed weet hoe ze toen vochten en wat ze ter beschikking hadden om hun vijand te overmeesteren. Als laatste hebben wij gekeken naar het verloop van twee veldslagen en hebben we deze volledig geanalyseerd om uiteindelijk te kunnen zeggen hoe deze beter hadden kunnen verlopen. Wij hebben verscheidene bronnen gebruikt om ons werk te onderbouwen, gaande van boeken uit het archief van de Koninklijke Militaire School tot websites van professoren latijn die thesissen over het Romeinse leger hebben geschreven. Om nog extra documentatie en afbeeldingen te verschaffen bij deze onderzoekscompetentie, hebben wij besloten om deze site te maken.")])}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Onderverdeling=void 0;var r=t(1);n.Onderverdeling=function(){return(0,r.createVNode)(2,"article",null,[(0,r.createVNode)(2,"h2",null,"Onderverdeling van het leger"),(0,r.createVNode)(2,"p",null,"De Romeinen hadden verschillende rangen binnen het leger waartoe je kon behoren. Het leger werd opgedeeld in meerdere legioenen en hulptroepen waarmee ze vanuit verschillende hoeken de vijand gestructureerd konden aanvallen. Doorheen de jaren nam het aantal soldaten sterk toe. De reden daartoe was vrij eenvoudig. Eenmaal een bepaalde bevolkingsgroep zijn strijdmanschappen vergrootte, was de andere verplicht om hetzelfde te doen, aangezien ze anders geen enkele kans zouden hebben op de overwinning."),(0,r.createVNode)(2,"h3",null,"Het legioen"),(0,r.createVNode)(2,"p",null,"Een legioen werd opgedeeld in 10 cohorten waarbij 1 cohorte een aantal van 600 soldaten telde op voorwaarde dat het legioen bestond uit ongeveer 6000 legionarii (= soldaten). De leider van een legioen werd een legatus genoemd. Het was altijd een man omdat enkel de mannen toegelaten werden bij het leger (Vrouwen moesten het huishouden doen). De legatus had ook 5 à 6 assistenten ter beschikking die de naam tribuni kregen. Dat waren steeds jonge mannen die een politieke carrière wilde starten maar eerst wat militaire ervaring nodig hadden. Vervolgens werden alle cohorten nog eens onderverdeeld in 3 manipels met telkens een aantal van 200 man. Het 1ste manipel van iedere cohorte kreeg de naam pilus. Het 1ste manipel van de 1ste cohorte werd de primus pilus genoemd met de primi pili centurio aan het hoofd. Deze 200 mannen werden nogmaals gesplitst in 2 groepen van 100 soldaten. Dergelijke groepen behoorden tot de rang van de centuria. Hierbij was een centurio (= onderofficier) de aanvoerder van 1 van de 6 centuriën. Hij beschikte over een aantal soldaten, 1 veldtekendrager en een optio. Zijn belangrijkheid was afhankelijk van de rang die zijn centuria had. Zo is de centurio van het 1ste centurie, 1ste manipel en 1ste cohorte de belangrijkste en naarmate je verder gaat in de hiërarchie nemen ze aan belangrijkheid af. Een centurio beschikte net zoals een legatus over een assistent die de naam optio aangeboden kreeg. Deze optio beschikte over een klein manschap om wat ervaring te krijgen over hoe je leiding moest geven. Het uiteindelijke doel van de optio was te promoveren om zo de functie van een centurio te krijgen. Zeer ervaren centurio’s kregen ook nog kans om praefectus castrorum (= kampcommandant) te worden. Tot slot werden die 100 man nog een keer opgedeeld in 10 groepjes van telkens 10 soldaten die samen een kleine tent moesten delen waarin ze konden overnachten. Dergelijk tenten waren ongeveer 4 bij 3 meter. De reden hiervoor was dat ze omwille van hun grootte makkelijk te vervoeren waren. Deze groepjes werden conturbernium genoemd. Elk conturbernium beschikte over een muilezel die de soldaten hielp bij het vervoeren van hun goederen. Het legioen bevatte naast reeds vermelde rangen nog andere personen die een specifieke taak uitvoerden."),(0,r.createVNode)(2,"p",null,["Een aquilifer (= standaarddrager) kreeg de taak om met het Romeinse embleem van een aquila (= arend) het legioen vooraf te gaan en stond aan het hoofd van alle andere veldtekendragers. In een legioen waren er ook bakkers, smeden, dokter, …",(0,r.createVNode)(2,"p"),"Een legioen kon dus zonder enig probleem enkele maanden rondtrekken door de grote voorraad van dingen die ze meesleurde tijdens hun tocht en het groot aanbod van assistenten."]),(0,r.createVNode)(2,"h3",null,"De hulptroepen"),(0,r.createVNode)(2,"p",null,["Naast legioenen maakte de Romeinen ook veelvuldig gebruik van de auxilia (= hulptroepen). Daartoe behoorden de soldaten die niet de status hadden van Romeinse staatsburger doordat ze afkomstig waren uit andere volkeren. Omwille van hun andere afkomst kregen ze maar 1/3 van het loon van een legionarius.",(0,r.createVNode)(2,"p"),"Hun voornaamste functie was om de legioenen te helpen en om de grenzen te bewaken en te verdedigen. Deze taken moesten ze uitvoeren onder bevel van praefecti (= Romeinse officieren). Als een auxiliarius (= een soldaat van de hulptroepen) een diensttermijn van 25 jaar had afgesloten, kreeg hij en zijn gezin vanaf dat moment de status van een Romeins staatsburger. De zonen van een ex-auxiliarius gingen als legionarius werken wat hen de kans gaf om meer te verdienen dan hun vader. De ex-auxiliarius zelf nam de naam van de regerende keizer aan.",(0,r.createVNode)(2,"p"),"Net zoals de legioenen zijn er verschillende onderdelen binnen de hulptroepen zoals: de equitatus (= ruiters), de sagittarii (= boogschutters) en de funditores (= slingeraars). Elke soldaat binnen de hulptroepen kreeg een bijpassend wapen afhankelijk tot welke groep hij behoorde."]),(0,r.createVNode)(2,"p",null,(0,r.createVNode)(2,"table","onderverdeling-table",[(0,r.createVNode)(2,"thead",null,(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"th",null,"groepen"),(0,r.createVNode)(2,"th",null,"legioenen"),(0,r.createVNode)(2,"th",null,"hulptroepen")])),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"belangrijkste onderdelen"),(0,r.createVNode)(2,"td",null,["cohorten",(0,r.createVNode)(2,"br"),"manipels",(0,r.createVNode)(2,"br"),"centuria",(0,r.createVNode)(2,"br"),"conturbernium"]),(0,r.createVNode)(2,"td",null,["sagittarii",(0,r.createVNode)(2,"br"),"equitatus",(0,r.createVNode)(2,"br"),"funditores"])]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"aantal"),(0,r.createVNode)(2,"td",null,["1 cohort = ± 600",(0,r.createVNode)(2,"br"),"1 manipel = ± 200",(0,r.createVNode)(2,"br"),"1 centuria = ± 100",(0,r.createVNode)(2,"br"),"1 conturbernium = ± 10"]),(0,r.createVNode)(2,"td",null,"aantal is onduidelijk")]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"leiders"),(0,r.createVNode)(2,"td",null,"legioen --\x3e legatus centuria --\x3e centurio zeer ervaren centurio --\x3e  praefectus castrorum"),(0,r.createVNode)(2,"td",null,"Hulptroepen --\x3e praefecti")]),(0,r.createVNode)(2,"tr",null,[(0,r.createVNode)(2,"td",null,"status"),(0,r.createVNode)(2,"td",null,"Romeins staatsburger"),(0,r.createVNode)(2,"td",null,"geen Romeins staatsburger. Afkomstig van andere volkeren")])])),(0,r.createVNode)(2,"h3",null,"Vergelijking"),(0,r.createVNode)(2,"p",null,"Als we de onderverdeling bij de Romeinen vergelijken met de onze dan merken we op dat de structuur voor een groot deel bewaard is gebleven. Toch kunnen we stellen dat het huidige systeem meer onderverdelingen heeft en dat de namen ook steeds gewijzigd zijn. Zo is in 2017 de generaal de leider van het leger en vroeger sprak men over legatus die de leiding had over het legioen.")])}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Veldslagen=void 0;var r=t(1);n.Veldslagen=function(){return(0,r.createVNode)(2,"article",null,[(0,r.createVNode)(2,"h2",null,"Veldslagen en oorlogen"),(0,r.createVNode)(2,"p",null,"De Romeinen hebben doorheen hun lange bestaan in vele delen van de wereld gevochten tegen verschillende rijken, stadstaten, handelsnaties en barbaarse stammen aangezien ze steeds meer grondgebied wilden veroveren. Hoewel velen hiervan werden gewonnen dankzij hun doordachte tactieken en ijzersterke discipline, waren er ook zware nederlagen bij zoals: de slag bij het Teutoburgerwoud, de slag bij Cannae en de slag bij Adrianopolis. Door deze nederlagen schaafden ze hun tactieken bij om dezelfde fouten niet nog eens te maken."),(0,r.createVNode)(2,"h3",null,"De slag bij Alesia"),(0,r.createVNode)(2,"p",null,'De slag bij Alesia werd gevochten tussen de Romeinse troepen van Julius Caesar en de Avernische troepen van Vercingetorix. Deze slag was de beslissende slag in de strijd tussen de Galliërs en de Romeinen en het was tevens een van de grootste overwinningen van Caesar. De slag vond plaats in 52 v.C. bij het Gallische Alesia rond een versterkt fort van het volk Mandubii. Het fort van Alesia was gelegen bovenop een heuvel waar rivieren langs stroomden. Caesar gaf van de omgeving een zeer goede beschrijving in zijn Commentarii de bello Gallico: "Ipsum erat oppidum Alesia in colle summo admodum edito loco, ut nisi obsidione expugnari non posse videretur. Cuius collis radices duo duabus ex partibus flumina subluebant. Ante id oppidum planities circiter millia passuum III in longitudine patebat; reliquis ex omnibus partibus colles mediocri interiecto spatio pari altitudinis fastigio oppidum cingebant." Dit kan men vertalen als: ‘De vesting Alesia zelf lag op een heuveltop die aanzienlijk boven de vlakte uitstak, zodat zij oninneembaar scheen tenzij door blokkade. De voet van die heuvel wordt aan twee zijden bespoeld door waterlopen. Vóór de vesting strekte zich een ongeveer drie mijl brede vlakte uit; aan al de andere zijden omringde heuvels, op korte afstand van elkaar gelegen en met gelijke tophoogte, de vesting.’ Door deze uitstekende locatie was het zeer moeilijk om het fort in te nemen dus besloot Caesar om het fort te belegeren door gebruik te maken van een circumvallatielinie om zo de troepen en de bevolking van Alesia uit te hongeren.'),(0,r.createVNode)(2,"p",null,["De linie bestond uit meerdere verstevigingen en wallen met een totale lengte van ongeveer 18km. De tactiek van Caesar bleek zeer goed te werken aangezien Vercingetorix radeloos was. De enige mogelijkheid die Vercingetorix nog had was om een deel van de Gallische cavalerie te doen ontsnappen door een nog onvoltooid gedeelte van de linie om versterking te halen. Zij slaagden in deze opzet en brachten succesvol een ontzettingsleger op de been. Caesar had echter aan alle mogelijke scenario’s gedacht en hij had besloten om een contravallatielinie van 21 kilometer te bouwen rond de circumvallatielinie, waardoor de Romeinen langs twee zijden tegen de Gallische aanvallen beschermd waren.",(0,r.createVNode)(2,"br"),"Eenmaal het ontzettingsleger bij Alesia was aangekomen, waren het eigenlijk de Romeinen die belegerd waren aangezien ze ingesloten zaten tussen twee Gallische legers. Onder leiding van Commius viel het ontzettingsleger de contravallatielinie aan.",(0,r.createVNode)(2,"img","siege-of-alexia-img",null,{src:"./images/siegeOfAlexia.jpg"}),"Tegelijkertijd liet Vercingetorix zijn troepen de circumvallatielinie aanvallen. De eerste dag hielden de Romeinen goed stand tegen de aanvallen van de Galliërs, maar de daar opvolgende dagen gingen bergaf. Ze werden gedwongen om forten en kampen in de contravallatielinie op te geven, maar Gaius rebonius kon met de cavalerie voorkomen dat de Galliërs hier gebruik van konden maken. Na maandenlang vechten besloot de neef van Vercingetorix, Vercassivellaunos, om met 60.000 manschappen de Romeinse stellingen aan te vallen. Hij koos de plek waar de stellingen het zwakst waren, namelijk waar de linies op dezelfde plek een rivier kruisten. Vercingetorix liet van binnenuit op dezelfde plaats een aanval uitvoeren, maar Caesar had zoveel vertrouwen in zijn troepen dat hij het bevel gaf om de stellingen te behouden. Caesar nam een grote gok door met 6.000 manschappen een leger van 60.000 manschappen aan te vallen, maar hij overdonderde de Galliërs zo hard dat ze zich genoodzaakt voelden om zich terug te trekken."]),(0,r.createVNode)(2,"p",null,"Hiermee was het belangrijkste en meest beslissende gevecht gestreden waarna de troepen in Alesia zich overgaven door hongersnood en gebrek aan manschappen. Rome was de grote overwinnaar bij deze slag die de basis vormde voor het verder veroveren van Gallië en Brittannië. De Gallische soldaten werden als slaven meegenomen en verkocht. Vercingetorix werd tevens gevangengenomen, maar niet verkocht aangezien de Romeinen hem wilden houden als trofee. Na een paar jaar werd hij ritueel gewurgd tijdens een triomftocht. De elementen die de Romeinen de overwinning hebben bezorgd zijn vooral berust op de geest. Caesar heeft steeds de moreel bij zijn troepen hoog weten te houden hoewel ze soms nederlagen leden. Dit zorgde ervoor dat de strijdlust bij de soldaten aanwezig bleef en ze steeds voelden dat ze de bovenhand hadden in het gevecht. Caesar nam het moreel van zijn troepen zeer serieus en ging zelfs zo ver dat hij met hen meestreed. Het moreel van zijn troepen lag aan de basis van de laatste belangrijke slag aangezien ze het gevecht onderbemand moesten aangaan, maar uiteindelijk hebben ze de overwinning behaald. Een tweede punt waardoor ze deze slag hebben gewonnen, is het goed doordachte aanvalsplan van Caesar. Zo had hij de contravallatielinie voorzien voor een eventuele aanval. Was deze linie er niet geweest, hadden de Galliërs deze veldslag gegarandeerd gewonnen door hun grote aantallen. Caesar was ook degene die een verrassingsaanval heeft kunnen afwenden door de vrouwen en kinderen niet uit Alesia te laten vertrekken. De Galliërs wilden hen namelijk als afleiding gebruiken om ondertussen een versteviging aan te vallen, maar door Caesar zijn besluit om de vrouwen en kinderen niet buiten te laten is de aanval niet kunnen doorgaan. Het enige negatieve punt dat geoptimaliseerd had kunnen worden is de bouw van de linies bij de rivieren aangezien dit het zwakke punt was van het kamp. Deze slag is een goed voorbeeld van de Romeinse discipline en strijdlust aangezien ze geen enkele grote fout hebben begaan die tot een eventueel verlies had kunnen lijden."),(0,r.createVNode)(2,"h3",null,"De slag bij het Teutoburgerwoud"),(0,r.createVNode)(2,"p",null,"De slag bij het Teutoburgerwoud werd gevochten tussen de Romeinse troepen van Varus en de Germaanse troepen van Arminius. Deze slag leidde een zevenjarige oorlog in, die uiteindelijk tot gevolg had dat de Rijn voor een periode van 400 jaar werd vastgelegd als grens van het Romeinse Rijk. De slag vond plaats in 9 n.C. nabij Kalkriese dat in Duitsland is gelegen. De slag was een van de grootste nederlagen uit de geschiedenis van het Romeinse leger."),(0,r.createVNode)(2,"p",null,["De Romeinen waren namelijk in een list getrapt van Arminius, de leider van de Germaanse stammen. Hij liet doorgeven dat er een opstand aan de gang was van veroverde Germaanse stammen. Hij wilde de Romeinen namelijk naar een voor hen onbekend gebied lokken zodat de Germanen een strategisch voordeel hadden. De Romeinse aanvoerder Varus was op dat moment met zijn leger op weg naar hun winterkampen voor de opkomende winter. Hij geloofde echter het nepbericht van Arminius en hij week van zijn route af en ging door het Teutoburgerwoud naar de zogezegde opstand.",(0,r.createVNode)(2,"br"),"Wat hij echter niet wist, was dat hij opgewacht werd door een groot Germaans leger dat zich in het bos had verstopt om een verrassingsaanval uit te voeren. Het Teutoburgerwoud was ondoordringbaar, mistig en vochtig, iets wat de Romeinen niet gewend waren aangezien zij altijd op vlakke en open slagvelden streden. Door het gebrek aan overzicht en de willekeur van de Germanen hadden de Romeinen vanaf het begin een nadeel. Ze konden namelijk hun gebruikelijke tactieken niet uitvoeren door het gebrek aan organisatie en ruimte. Toen na een paar dagen de Romeinse ondergang onafwendbaar leek, pleegde Varus zelfmoord. Hiermee was het lot van zijn troepen ook bezegeld aangezien ze geen leider meer hadden. Van de 18 000 manschappen slaagden slechts enkelen erin aan de vijand te ontsnappen en de Romeinse winterkampen aan de Rijn te bereiken."]),(0,r.createVNode)(2,"div","teutoburgerwoud-img",(0,r.createVNode)(2,"span","teutoburgerwoud-img-txt","Uitzicht van het Teutoburgerwoud gebaseerd op teksten van de eerste eeuw n.C.")),(0,r.createVNode)(2,"p",null,"Deze slag had tot gevolg dat er een einde kwam aan de Romeinse expansie in Noord-Europa. Ook had keizer Augustus besloten dat vanaf toen de Rijn de vaste grens zou worden van het Imperium Romanum."),(0,r.createVNode)(2,"p",null,"In deze slag is heel wat misgelopen, vooral op het vlak van leiderschap. Goed leiderschap vormt de basis voor elke slag als je kans wilt maken op de overwinning. Varus was in geen enkel opzicht een goede leider in deze slag. Hij nam irrationele beslissingen en dacht niet na over de gevolgen hiervan. Het begon reeds bij het niet nagaan van de informatie die hij had verkregen. Hij vertrouwde blind op de verkregen informatie en stippelde meteen een route uit. Hij had eigenlijk eerst de situatie moeten bekijken en eventueel ruiters voorop moeten sturen om na te gaan of er wel degelijk een opstand was. Hiermee had hij het conflict kunnen vermijden aangezien de ruiters dan hadden gezien dat er geen opstand was. Zijn tweede grote fout was om het leger wijd gespreid te laten lopen in een gebied dat hij niet kende. Het leger was namelijk aan het marcheren met een afstand van 15 kilometer tussen de eerste en de laatste soldaten. Hierdoor konden de Germanen met hun grotere aantallen de kleine groepjes Romeinen zonder enig probleem aanvallen. Had hij zijn leger compact laten marcheren, hadden de Romeinen nog een haalbare kans gehad op de overwinning in het gevecht aangezien de laatste troepen dan snel konden bijspringen om de eerste te helpen. Tijdens het gevecht zelf nam hij alleen maar slechte beslissingen. Hij had wel veel tegenslag met het weer waardoor de schutters hun bogen niet konden gebruiken en de houten schilden te zwaar werden om te dragen door het gewicht van het water dat in het hout was opgeslorpt. Hij gaf het order om door te marcheren naar een open plek, maar aangezien hij het bos niet kende wist hij niet dat er geen open plekken in hun nabijheid waren. Dit was een fout order aangezien hij de omgeving niet kende en dus ook niet wist waar er zich nog Germanen bevonden. Hij had zijn positie moeten verdedigen om zo een basis proberen op te richten aangezien het leger het kwetsbaarst is wanneer ze zich aan het verplaatsen zijn. Varus gaf ook geen steun aan zijn manschappen waardoor de strijdlust weg ging en velen het nut van de strijd niet meer zagen. De Legatus, Numonius Vala, van een van zijn drie legioenen was een van die personen die het leiderschap van Varus in twijfel trok en de verzwakte moreel aanvoelde. Hij was dan ook degene die samen met de ruiters vluchtte en zo de troepen in de steek liet. Maar ver kwam hij niet aangezien hij in het bos zelf nog werd afgemaakt door de ruiters van de Germanen. Zonder de steun van de ruiters was het leger verzwakt en dus grepen de Germanen hun kans. Ze begonnen bijna iedereen genadeloos af te slachten. Varus zag op dat ogenblik in dat hij zwaar had gefaald en pleegde daarom zelfmoord."),(0,r.createVNode)(2,"h3",null,"Vergelijking"),(0,r.createVNode)(2,"p",null,"Het is zeer moeilijk om het huidige leger te vergelijken met het Romeinse leger aangezien er zich een zeer grote ontwikkeling heeft plaatsgevonden op het gebied van wetenschappen en technologie. Vroeger streed men met een zwaard en een schild en had je als steun enkel ruiters. Nu wordt er gestreden vanop een zeer grote afstand aangezien men machinegeweren, pistolen, langeafstandsrakketten,… gebruikt. Er zijn nu ook veel nieuwe ondersteuningsmogelijkheden zoals tanks, schepen en vliegtuigen waardoor er een heleboel nieuwe tactieken mogelijk zijn. Door al deze veranderingen heeft men de tactieken die men gebruikt ook moeten veranderen. Vroeger kon men in een man op man gevecht tactieken gebruiken die zeer effectief waren op korte afstand en een klein slagveld. Als men deze tegenwoordig zou uitvoeren, zouden de soldaten ter plaatse worden afgemaakt. De hoeveelheid soldaten die daadwerkelijk vechten is ook sterk afgenomen in vergelijking met het Romeinse leger. Vroeger streed men met legers van zeer grote aantallen. Deze aantallen kunnen we ons tegenwoordig niet meer voorstellen. Er gebeurt nu veel meer achter de schermen om de soldaten die moeten vechten te helpen. Zo wordt er via satellieten of drones informatie verzameld over de omgeving waarin de soldaten zich bevinden en eventueel waar hun vijanden schuilen. Een soldaat heeft nu ook de mogelijkheid om, mits de goedkeuring van zijn aanvoerder, een luchtaanval in te roepen. De huidige tactieken draaien ook niet meer alleen maar rond het militaire aspect, maar ook rond onder andere het economische. Als men zijn vijand economisch kan verzwakken zal deze ook minder weerbaar zijn.")])}},function(e,n){},function(e,n,t){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}n.__esModule=!0;var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i=t(21),l=r(i),d=t(51),s=r(d),u=t(33),c=t(13),p=t(34),h=r(p),f=t(32),v=function(){try{return window.history.state||{}}catch(e){return{}}},g=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,s.default)(f.canUseDOM,"Browser history needs a DOM");var n=window.history,t=(0,f.supportsHistory)(),r=!(0,f.supportsPopStateOnHashChange)(),i=e.forceRefresh,d=void 0!==i&&i,p=e.getUserConfirmation,g=void 0===p?f.getConfirmation:p,m=e.keyLength,b=void 0===m?6:m,k=e.basename?(0,c.stripTrailingSlash)((0,c.addLeadingSlash)(e.basename)):"",w=function(e){var n=e||{},t=n.key,r=n.state,o=window.location,i=o.pathname,l=o.search,d=o.hash,s=i+l+d;return k&&(s=(0,c.stripPrefix)(s,k)),a({},(0,c.parsePath)(s),{state:r,key:t})},N=function(){return Math.random().toString(36).substr(2,b)},y=(0,h.default)(),j=function(e){a(B,e),B.length=n.length,y.notifyListeners(B.location,B.action)},V=function(e){(0,f.isExtraneousPopstateEvent)(e)||z(w(e.state))},O=function(){z(w(v()))},_=!1,z=function(e){if(_)_=!1,j();else{y.confirmTransitionTo(e,"POP",g,function(n){n?j({action:"POP",location:e}):C(e)})}},C=function(e){var n=B.location,t=E.indexOf(n.key);-1===t&&(t=0);var r=E.indexOf(e.key);-1===r&&(r=0);var o=t-r;o&&(_=!0,M(o))},x=w(v()),E=[x.key],U=function(e){return k+(0,c.createPath)(e)},P=function(e,r){(0,l.default)(!("object"===(void 0===e?"undefined":o(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,u.createLocation)(e,r,N(),B.location);y.confirmTransitionTo(a,"PUSH",g,function(e){if(e){var r=U(a),o=a.key,i=a.state;if(t)if(n.pushState({key:o,state:i},null,r),d)window.location.href=r;else{var s=E.indexOf(B.location.key),u=E.slice(0,-1===s?0:s+1);u.push(a.key),E=u,j({action:"PUSH",location:a})}else(0,l.default)(void 0===i,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},R=function(e,r){(0,l.default)(!("object"===(void 0===e?"undefined":o(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,u.createLocation)(e,r,N(),B.location);y.confirmTransitionTo(a,"REPLACE",g,function(e){if(e){var r=U(a),o=a.key,i=a.state;if(t)if(n.replaceState({key:o,state:i},null,r),d)window.location.replace(r);else{var s=E.indexOf(B.location.key);-1!==s&&(E[s]=a.key),j({action:"REPLACE",location:a})}else(0,l.default)(void 0===i,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},M=function(e){n.go(e)},S=function(){return M(-1)},D=function(){return M(1)},A=0,T=function(e){A+=e,1===A?((0,f.addEventListener)(window,"popstate",V),r&&(0,f.addEventListener)(window,"hashchange",O)):0===A&&((0,f.removeEventListener)(window,"popstate",V),r&&(0,f.removeEventListener)(window,"hashchange",O))},I=!1,H=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=y.setPrompt(e);return I||(T(1),I=!0),function(){return I&&(I=!1,T(-1)),n()}},L=function(e){var n=y.appendListener(e);return T(1),function(){T(-1),n()}},B={length:n.length,action:"POP",location:x,createHref:U,push:P,replace:R,go:M,goBack:S,goForward:D,block:H,listen:L};return B};n.default=g},function(e,n,t){e.exports=t(42).default,e.exports.default=e.exports},function(e,n,t){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e){var n=e.children;return(0,i.createVNode)(2,"div","page",[(0,i.createVNode)(2,"header",null,[(0,i.createVNode)(2,"h1",null,"Het Romeinse Leger"),(0,i.createVNode)(2,"nav",null,(0,i.createVNode)(2,"ul",null,[(0,i.createVNode)(2,"li",null,(0,i.createVNode)(16,d.IndexLink,null,null,{activeClassName:"linkActiveClass",children:"Inleiding"})),(0,i.createVNode)(2,"li",null,(0,i.createVNode)(16,d.Link,null,null,{to:"/onderverdeling",activeClassName:"linkActiveClass",children:"onderverdeling"})),(0,i.createVNode)(2,"li",null,(0,i.createVNode)(16,d.Link,null,null,{to:"/bewapening",activeClassName:"linkActiveClass",children:"bewapening"})),(0,i.createVNode)(2,"li",null,(0,i.createVNode)(16,d.Link,null,null,{to:"/veldslagen",activeClassName:"linkActiveClass",children:"veldslagen"})),(0,i.createVNode)(2,"li",null,(0,i.createVNode)(16,d.Link,null,null,{to:"/besluit",activeClassName:"linkActiveClass",children:"besluit"})),(0,i.createVNode)(2,"li",null,(0,i.createVNode)(16,d.Link,null,null,{to:"/bronnen",activeClassName:"linkActiveClass",children:"bronnen"}))]))]),(0,i.createVNode)(2,"section","content",n),(0,i.createVNode)(2,"footer",null,[(0,i.createVNode)(2,"span",null,"mei 2017"),(0,i.createVNode)(2,"span",null,"Kosh 6LWib"),(0,i.createVNode)(2,"span",null,"Aquila Ziedins (6), Tobias Alexander (1)")])])}function a(e){e.children;return(0,i.createVNode)(2,"div",null,"Hier bent u uit het Romeinse rijk")}var i=t(1),l=r(i),d=t(30),s=t(29),u=r(s);t(28);var c=t(25),p=t(26),h=t(23),f=t(27),v=t(22),g=t(24),m=(0,u.default)(),b=(0,i.createVNode)(16,d.Router,null,null,{history:m,children:(0,i.createVNode)(16,d.Route,null,null,{component:o,children:[(0,i.createVNode)(16,d.IndexRoute,null,null,{component:c.Inleiding}),(0,i.createVNode)(16,d.Route,null,null,{path:"onderverdeling",component:p.Onderverdeling}),(0,i.createVNode)(16,d.Route,null,null,{path:"bewapening",component:h.Bewapening}),(0,i.createVNode)(16,d.Route,null,null,{path:"veldslagen",component:f.Veldslagen}),(0,i.createVNode)(16,d.Route,null,null,{path:"besluit",component:v.Besluit}),(0,i.createVNode)(16,d.Route,null,null,{path:"bronnen",component:g.Bronnen}),(0,i.createVNode)(16,d.Route,null,null,{path:"*",component:a})]})});l.default.render(b,document.getElementById("app"))},function(e,n,t){"use strict";n.__esModule=!0;n.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),n.addEventListener=function(e,n,t){return e.addEventListener?e.addEventListener(n,t,!1):e.attachEvent("on"+n,t)},n.removeEventListener=function(e,n,t){return e.removeEventListener?e.removeEventListener(n,t,!1):e.detachEvent("on"+n,t)},n.getConfirmation=function(e,n){return n(window.confirm(e))},n.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},n.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},n.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},n.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,n,t){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}n.__esModule=!0,n.locationsAreEqual=n.createLocation=void 0;var o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a=t(55),i=r(a),l=t(56),d=r(l),s=t(13);n.createLocation=function(e,n,t,r){var a=void 0;return"string"==typeof e?(a=(0,s.parsePath)(e),a.state=n):(a=o({},e),void 0===a.pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==n&&void 0===a.state&&(a.state=n)),a.key=t,r&&(a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=(0,i.default)(a.pathname,r.pathname)):a.pathname=r.pathname),a},n.locationsAreEqual=function(e,n){return e.pathname===n.pathname&&e.search===n.search&&e.hash===n.hash&&e.key===n.key&&(0,d.default)(e.state,n.state)}},function(e,n,t){"use strict";n.__esModule=!0;var r=t(21),o=function(e){return e&&e.__esModule?e:{default:e}}(r),a=function(){var e=null,n=function(n){return(0,o.default)(null==e,"A history supports only one prompt at a time"),e=n,function(){e===n&&(e=null)}},t=function(n,t,r,a){if(null!=e){var i="function"==typeof e?e(n,t):e;"string"==typeof i?"function"==typeof r?r(i,a):((0,o.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),a(!0)):a(!1!==i)}else a(!0)},r=[];return{setPrompt:n,confirmTransitionTo:t,appendListener:function(e){var n=!0,t=function(){n&&e.apply(void 0,arguments)};return r.push(t),function(){n=!1,r=r.filter(function(e){return e!==t})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];r.forEach(function(e){return e.apply(void 0,n)})}}};n.default=a},function(e,n,t){"use strict";function r(e,n){if(28&e.flags){var t=e.parentVNode;t&&(t.dom=n,r(t,n))}}function o(e,n,t){var r=s.get(e);void 0===r&&(r=[],s.set(e,r),u.then(function(){s.delete(e),e._updating=!0,i(e,n,function(){for(var n=0,t=r.length;n<t;n++)r[n].call(e)}),e._updating=!1})),d.isNullOrUndef(t)||r.push(t)}function a(e,n,t){d.isFunction(n)&&(n=n(e.state,e.props,e.context));var r=e._pendingState;if(null===r)e._pendingState=r=n;else for(var a in n)r[a]=n[a];if(!d.isBrowser||e._pendingSetState||e._blockRender){var l=e.state;if(null===l)e.state=r;else for(var s in r)l[s]=r[s];e._pendingState=null,!d.isNullOrUndef(t)&&e._blockRender&&e._lifecycle.addListener(t.bind(e))}else e._updating?o(e,!1,t):(e._pendingSetState=!0,e._updating=!0,i(e,!1,t),e._updating=!1)}function i(e,n,t){if(!e._unmounted){if(n||!e._blockRender){e._pendingSetState=!1;var o=e._pendingState,a=e.state,i=d.combineFrom(a,o),s=e.props,u=e.context;e._pendingState=null;var c=e._updateComponent(a,i,s,s,u,n,!0),p=!0;d.isInvalid(c)?c=l.createVNode(4096,null):c===d.NO_OP?(c=e._lastInput,p=!1):d.isStringOrNumber(c)?c=l.createVNode(1,null,null,c):d.isArray(c)&&d.throwError();var h=e._lastInput,f=e._vNode,v=h.dom&&h.dom.parentNode||(h.dom=f.dom);if(e._lastInput=c,p){var g=void 0;d.isUndefined(e.getChildContext)||(g=e.getChildContext()),g=d.isNullOrUndef(g)?e._childContext:d.combineFrom(u,g);var m=e._lifecycle;l.internal_patch(h,c,v,m,g,e._isSVG,!1),m.trigger(),d.isUndefined(e.componentDidUpdate)||e.componentDidUpdate(s,a,u),d.isNull(l.options.afterUpdate)||l.options.afterUpdate(f)}var b=f.dom=c.dom;l.options.findDOMNodeEnabled&&l.internal_DOMNodeMap.set(e,c.dom),r(f,b)}else e.state=e._pendingState,e._pendingState=null;d.isNullOrUndef(t)||t.call(e)}}Object.defineProperty(n,"__esModule",{value:!0});var l=t(1),d=t(0),s=(d.ERROR_MSG,new Map),u=Promise.resolve(),c=function(){function e(e,n){this.state=null,this._blockRender=!1,this._blockSetState=!0,this._pendingSetState=!1,this._pendingState=null,this._lastInput=null,this._vNode=null,this._unmounted=!1,this._lifecycle=null,this._childContext=null,this._isSVG=!1,this._updating=!0,this.props=e||l.EMPTY_OBJ,this.context=n||l.EMPTY_OBJ}return e.prototype.forceUpdate=function(e){!this._unmounted&&d.isBrowser&&i(this,!0,e)},e.prototype.setState=function(e,n){this._unmounted||(this._blockSetState?d.throwError():a(this,e,n))},e.prototype.setStateSync=function(e){this.setState(e)},e.prototype._updateComponent=function(e,n,t,r,o,a,i){if(!0===this._unmounted&&d.throwError(),t!==r||r===l.EMPTY_OBJ||e!==n||a){if(t===r&&r!==l.EMPTY_OBJ||(d.isUndefined(this.componentWillReceiveProps)||i||(this._blockRender=!0,this.componentWillReceiveProps(r,o),this._blockRender=!1),this._pendingSetState&&(n=d.combineFrom(n,this._pendingState),this._pendingSetState=!1,this._pendingState=null)),d.isUndefined(this.shouldComponentUpdate)||this.shouldComponentUpdate(r,n,o)||a){d.isUndefined(this.componentWillUpdate)||(this._blockSetState=!0,this.componentWillUpdate(r,n,o),this._blockSetState=!1),this.props=r,this.state=n,this.context=o,l.options.beforeRender&&l.options.beforeRender(this);var s=this.render(r,n,o);return l.options.afterRender&&l.options.afterRender(this),s}this.props=r,this.state=n,this.context=o}return d.NO_OP},e.prototype.render=function(e,n,t){},e}();n.default=c},function(e,n,t){"use strict";function r(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];if(a.isInvalid(e)||a.isObject(e))throw new Error("Inferno Error: createElement() name parameter cannot be undefined, null, false or true, It must be a string, class or function.");var l,d=t,s=null,u=null,c=null,p=0;if(t&&(1===t.length?d=t[0]:0===t.length&&(d=void 0)),a.isString(e)){if(p=o.getFlagsForElementVnode(e),!a.isNullOrUndef(n)){l={};for(var h in n)"className"===h||"class"===h?c=n[h]:"key"===h?u=n.key:"children"===h&&a.isUndefined(d)?d=n.children:"ref"===h?s=n.ref:l[h]=n[h]}}else if(p=16,a.isUndefined(d)||(n||(n={}),n.children=d,d=null),!a.isNullOrUndef(n)){l={};for(var h in n)i.has(h)?(s||(s={}),s[h]=n[h]):"key"===h?u=n.key:l[h]=n[h]}return o.createVNode(p,e,c,d,l,u,s)}Object.defineProperty(n,"__esModule",{value:!0});var o=t(1),a=t(0),i=new Set;i.add("onComponentWillMount"),i.add("onComponentDidMount"),i.add("onComponentWillUnmount"),i.add("onComponentShouldUpdate"),i.add("onComponentWillUpdate"),i.add("onComponentDidUpdate"),n.default=r},function(e,n,t){"use strict";function r(e){return e.to="/",o.createVNode(8,a.default,null,null,e)}Object.defineProperty(n,"__esModule",{value:!0});var o=t(1),a=t(15);n.default=r},function(e,n,t){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])};return function(n,t){function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(n,"__esModule",{value:!0});var o=t(7),a=function(e){function n(n,t){var r=e.call(this,n,t)||this;return n.path="/",r}return r(n,e),n}(o.default);n.default=a},function(e,n,t){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])};return function(n,t){function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(n,"__esModule",{value:!0});var o=t(7),a=function(e){function n(n,t){var r=e.call(this,n,t)||this;return n.to||(n.to="/"),r}return r(n,e),n}(o.default);n.default=a},function(e,n,t){"use strict";function r(e){if(!e)throw new TypeError('Inferno: Error "inferno-router" requires a history prop passed');return{createHref:e.createHref,listen:e.listen,push:e.push,replace:e.replace,isActive:function(e){return l.matchPath(!0,e,this.url)},get location(){return"blank"!==e.location.pathname?e.location:{pathname:"/",search:""}},get url(){return this.location.pathname+this.location.search}}}var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])};return function(n,t){function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(n,"__esModule",{value:!0});var a=t(1),i=t(10),l=t(17),d=t(16),s=function(e){function n(n,t){var o=e.call(this,n,t)||this;return o.router=r(n.history),o.state={url:n.url||o.router.url},o}return o(n,e),n.prototype.componentWillMount=function(){var e=this;this.router&&(this.unlisten=this.router.listen(function(){e.routeTo(e.router.url)}))},n.prototype.componentWillReceiveProps=function(e){var n=this;this.setState({url:e.url},this.props.onUpdate?function(){return n.props.onUpdate()}:void 0)},n.prototype.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.prototype.routeTo=function(e){var n=this;this.setState({url:e},this.props.onUpdate?function(){return n.props.onUpdate()}:void 0)},n.prototype.render=function(e){var n=this,t=l.default(e.children,this.state.url);return t.redirect?(setTimeout(function(){n.router.replace(t.redirect)},0),null):a.createVNode(4,d.default,null,null,{location:this.state.url,matched:t.matched,router:this.router})},n}(i.default);n.default=s},function(e,n,t){"use strict";function r(e){if(e.indexRoute&&!e.childRoutes)return o.default(i.default,e);var n={};for(var t in e)n[t]=e[t];if(n.children=[],n.indexRoute&&(n.children.push(l(n.indexRoute)),delete n.indexRoute),n.childRoutes){var r=a.isArray(n.childRoutes)?n.childRoutes:[n.childRoutes];(d=n.children).push.apply(d,s(r)),delete n.childRoutes}return 1===n.children.length&&(n.children=n.children[0]),(a.isArray(n.children)&&0===n.children.length||!a.isArray(n.children)&&0===Object.keys(n.children).length)&&delete n.children,o.default(i.default,n);var d}Object.defineProperty(n,"__esModule",{value:!0});var o=t(14),a=t(0),i=t(7),l=function(e){return o.default(i.default,e)},d=function(e){return r(e)},s=function(e){return e.map(d)};n.default=function(e){return e.map(r)}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(41);n.createRoutes=r.default;var o=t(37);n.IndexLink=o.default;var a=t(38);n.IndexRoute=a.default;var i=t(15);n.Link=i.default;var l=t(17);n.match=l.default;var d=t(39);n.Redirect=d.default,n.IndexRedirect=d.default;var s=t(7);n.Route=s.default;var u=t(40);n.Router=u.default;var c=t(16);n.RouterContext=c.default,n.default={Route:s.default,IndexRoute:a.default,Redirect:d.default,IndexRedirect:d.default,Router:u.default,RouterContext:c.default,Link:i.default,IndexLink:o.default,match:l.default,createRoutes:r.default}},function(e,n,t){"use strict";function r(e){return n.isArray(e)?e:e?[e]:e}function o(e){return!h(e.prototype)&&!h(e.prototype.render)}function a(e){var n=typeof e;return"string"===n||"number"===n}function i(e){return h(e)||c(e)}function l(e){return c(e)||!1===e||p(e)||h(e)}function d(e){return"function"==typeof e}function s(e){return"string"==typeof e}function u(e){return"number"==typeof e}function c(e){return null===e}function p(e){return!0===e}function h(e){return void 0===e}function f(e){return"object"==typeof e}function v(e){throw e||(e=n.ERROR_MSG),new Error("Inferno Error: "+e)}function g(e){console.warn(e)}function m(e,n){var t={};if(e)for(var r in e)t[r]=e[r];if(n)for(var r in n)t[r]=n[r];return t}function b(){this.listeners=[]}Object.defineProperty(n,"__esModule",{value:!0}),n.NO_OP="$NO_OP",n.ERROR_MSG="a runtime error occured! Use Inferno in development environment to find the error.",n.isBrowser=!("undefined"==typeof window||!window.document),n.toArray=r,n.isArray=Array.isArray,n.isStatefulComponent=o,n.isStringOrNumber=a,n.isNullOrUndef=i,n.isInvalid=l,n.isFunction=d,n.isString=s,n.isNumber=u,n.isNull=c,n.isTrue=p,n.isUndefined=h,n.isObject=f,n.throwError=v,n.warning=g,n.combineFrom=m,n.Lifecycle=b,b.prototype.addListener=function(e){this.listeners.push(e)},b.prototype.trigger=function(){for(var e,n=this.listeners;e=n.shift();)e()}},function(e,n,t){"use strict";function r(e,n,t,r){var o=p.get(e);if(t)o||(o={items:new Map,docEvent:null},o.docEvent=l(e,o),p.set(e,o)),n||c&&"onClick"===e&&s(r),o.items.set(r,t);else if(o){var i=o.items;i.delete(r)&&0===i.size&&(document.removeEventListener(a(e),o.docEvent),p.delete(e))}}function o(e,n,t,r,a,i){var l=t.get(n);if((!l||(r--,i.dom=n,l.event?l.event(l.data,e):l(e),!e.cancelBubble))&&r>0){var d=n.parentNode;if(null===d||a&&1===d.nodeType&&d.disabled)return;o(e,d,t,r,a,i)}}function a(e){return e.substr(2).toLowerCase()}function i(){this.cancelBubble=!0,this.stopImmediatePropagation()}function l(e,n){var t=function(e){var t=n.items.size;if(t>0){e.stopPropagation=i;var r={dom:document};try{Object.defineProperty(e,"currentTarget",{configurable:!0,get:function(){return r.dom}})}catch(e){}o(e,e.target,n.items,t,"click"===e.type,r)}};return document.addEventListener(a(e),t),t}function d(){}function s(e){e.onclick=d}Object.defineProperty(n,"__esModule",{value:!0});var u=t(0),c=u.isBrowser&&!!navigator.platform&&/iPad|iPhone|iPod/.test(navigator.platform),p=new Map;n.handleEvent=r},function(e,n,t){"use strict";function r(e,n){return{data:e,event:n}}Object.defineProperty(n,"__esModule",{value:!0}),n.linkEvent=r},function(e,n,t){"use strict";function r(e){for(var n=e.firstChild;n;)if(8===n.nodeType)if("!"===n.data){var t=document.createTextNode("");e.replaceChild(t,n),n=n.nextSibling}else{var r=n.previousSibling;e.removeChild(n),n=r||e.firstChild}else n=n.nextSibling}function o(e,n,t,r,o,a){var i=e.type,l=e.ref;e.dom=n;var d=e.props||m.EMPTY_OBJ;if(a){var u=n.namespaceURI===h.svgNS,c=m.createClassComponentInstance(e,i,d,r,u,t),v=c._lastInput;c._vNode=e,s(v,n,t,c._childContext,u),f.mountClassComponentCallbacks(e,l,c,t),c._updating=!1,p.options.findDOMNodeEnabled&&g.componentToDOMNodeMap.set(c,n)}else{var v=m.createFunctionalComponentInput(e,i,d,r);s(v,n,t,r,o),e.children=v,e.dom=v.dom,f.mountFunctionalComponentCallbacks(l,n,t)}return n}function a(e,n,t,r,o){var a=e.children,l=e.props,d=e.className,s=e.flags,u=e.ref;if(o=o||(128&s)>0,1!==n.nodeType||n.tagName.toLowerCase()!==e.type){var p=f.mountElement(e,null,t,r,o);return e.dom=p,m.replaceChild(n.parentNode,p,n),p}if(e.dom=n,a&&i(a,n,t,r,o),l){var h=!1,g=(3584&s)>0;g&&(h=b.isControlledFormElement(l));for(var k in l)v.patchProp(k,null,l[k],n,o,h);g&&b.processElement(s,e,n,l,!0,h)}return c.isNullOrUndef(d)?n.removeAttribute("class"):o?n.setAttribute("class",d):n.className=d,u&&f.mountRef(n,u,t),n}function i(e,n,t,o,a){r(n);var i=n.firstChild;if(c.isArray(e))for(var l=0,d=e.length;l<d;l++){var u=e[l];!c.isNull(u)&&c.isObject(u)&&(c.isNull(i)?f.mount(u,n,t,o,a):i=s(u,i,t,o,a).nextSibling)}else c.isStringOrNumber(e)?(i&&3===i.nodeType?i.nodeValue!==e&&(i.nodeValue=e):e&&(n.textContent=e),i=i.nextSibling):c.isObject(e)&&(s(e,i,t,o,a),i=i.nextSibling);for(;i;){var p=i.nextSibling;n.removeChild(i),i=p}}function l(e,n){if(3!==n.nodeType){var t=f.mountText(e,null);return e.dom=t,m.replaceChild(n.parentNode,t,n),t}var r=e.children;return n.nodeValue!==r&&(n.nodeValue=r),e.dom=n,n}function d(e,n){return e.dom=n,n}function s(e,n,t,r,i){var s=e.flags;return 28&s?o(e,n,t,r,i,(4&s)>0):3970&s?a(e,n,t,r,i):1&s?l(e,n):4096&s?d(e,n):void c.throwError()}function u(e,n,t){if(!c.isNull(n)){var r=n.firstChild;if(!c.isNull(r)){for(s(e,r,t,m.EMPTY_OBJ,!1),r=n.firstChild;r=r.nextSibling;)n.removeChild(r);return!0}}return!1}Object.defineProperty(n,"__esModule",{value:!0});var c=t(0),p=t(3),h=t(8),f=t(9),v=t(5),g=t(6),m=t(2),b=t(12);n.normalizeChildNodes=r,n.hydrateRoot=u},function(e,n,t){"use strict";function r(e){return"checkbox"===e||"radio"===e}function o(e){var n=this,t=n.props||u.EMPTY_OBJ,r=n.dom,o=t.value;if(t.onInput){var a=t.onInput;a.event?a.event(a.data,e):a(e)}else t.oninput&&t.oninput(e);var i=this,l=i.props||u.EMPTY_OBJ;o!==l.value&&d(l,r)}function a(e){var n=this.props||u.EMPTY_OBJ,t=n.onChange;t.event?t.event(t.data,e):t(e)}function i(e){e.stopPropagation();var n=this,t=n.props||u.EMPTY_OBJ,r=n.dom,o=t.value;if(t.onClick){var a=t.onClick;a.event?a.event(a.data,e):a(e)}else t.onclick&&t.onclick(e);var i=this,l=i.props||u.EMPTY_OBJ;o!==l.value&&d(l,r)}function l(e,n,t,l,s){d(t,n),l&&s&&(r(t.type)?(n.onclick=i.bind(e),n.onclick.wrapped=!0):(n.oninput=o.bind(e),n.oninput.wrapped=!0),t.onChange&&(n.onchange=a.bind(e),n.onchange.wrapped=!0))}function d(e,n){var t=e.type,o=e.value,a=e.checked,i=e.multiple,l=e.defaultValue,d=!s.isNullOrUndef(o);t&&t!==n.type&&n.setAttribute("type",t),i&&i!==n.multiple&&(n.multiple=i),s.isNullOrUndef(l)||d||(n.defaultValue=l+""),r(t)?(d&&(n.value=o),s.isNullOrUndef(a)||(n.checked=a)):d&&n.value!==o?n.value=o:s.isNullOrUndef(a)||(n.checked=a)}Object.defineProperty(n,"__esModule",{value:!0});var s=t(0),u=t(2);n.isCheckedType=r,n.processInput=l,n.applyValue=d},function(e,n,t){"use strict";function r(e,n){if("optgroup"===e.type){var t=e.children;if(d.isArray(t))for(var r=0,a=t.length;r<a;r++)o(t[r],n);else s.isVNode(t)&&o(t,n)}else o(e,n)}function o(e,n){var t=e.props||u.EMPTY_OBJ,r=e.dom;r.value=t.value,d.isArray(n)&&-1!==n.indexOf(t.value)||t.value===n?r.selected=!0:d.isNullOrUndef(n)&&d.isNullOrUndef(t.selected)||(r.selected=t.selected||!1)}function a(e){var n=this,t=n.props||u.EMPTY_OBJ,r=n.dom,o=t.value;if(t.onChange){var a=t.onChange;a.event?a.event(a.data,e):a(e)}else t.onchange&&t.onchange(e);var i=this,d=i.props||u.EMPTY_OBJ;o!==d.value&&l(i,r,d,!1)}function i(e,n,t,r,o){l(e,n,t,r),r&&o&&(n.onchange=a.bind(e),n.onchange.wrapped=!0)}function l(e,n,t,o){t.multiple!==n.multiple&&(n.multiple=t.multiple);var a=e.children;if(!d.isInvalid(a)){var i=t.value;if(o&&d.isNullOrUndef(i)&&(i=t.defaultValue),d.isArray(a))for(var l=0,u=a.length;l<u;l++)r(a[l],i);else s.isVNode(a)&&r(a,i)}}Object.defineProperty(n,"__esModule",{value:!0});var d=t(0),s=t(4),u=t(2);n.processSelect=i,n.applyValue=l},function(e,n,t){"use strict";function r(e){var n=this.props||d.EMPTY_OBJ,t=n.onChange;t.event?t.event(t.data,e):t(e)}function o(e){var n=this,t=n.props||d.EMPTY_OBJ,r=t.value;if(t.onInput){var o=t.onInput;o.event?o.event(o.data,e):o(e)}else t.oninput&&t.oninput(e);var a=this;r!==(a.props||d.EMPTY_OBJ).value&&i(a,n.dom,!1)}function a(e,n,t,a,l){i(t,n,a),a&&l&&(n.oninput=o.bind(e),n.oninput.wrapped=!0,t.onChange&&(n.onchange=r.bind(e),n.onchange.wrapped=!0))}function i(e,n,t){var r=e.value,o=n.value;if(l.isNullOrUndef(r)){if(t){var a=e.defaultValue;l.isNullOrUndef(a)?""!==o&&(n.value=""):a!==o&&(n.value=a)}}else o!==r&&(n.value=r)}Object.defineProperty(n,"__esModule",{value:!0});var l=t(0),d=t(2);n.processTextarea=a,n.applyValue=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(0);n.NO_OP=r.NO_OP;var o=t(20);n.getFlagsForElementVnode=o.getFlagsForElementVnode,n.internal_normalize=o.normalize;var a=t(3);n.options=a.options;var i=t(4);n.cloneVNode=i.cloneVNode,n.createVNode=i.createVNode;var l=t(8);n.internal_isUnitlessNumber=l.isUnitlessNumber;var d=t(45);n.linkEvent=d.linkEvent;var s=t(5);n.internal_patch=s.patch;var u=t(6);n.internal_DOMNodeMap=u.componentToDOMNodeMap,n.createRenderer=u.createRenderer,n.findDOMNode=u.findDOMNode,n.render=u.render;var c=t(2);n.EMPTY_OBJ=c.EMPTY_OBJ;n.version="3.1.0",n.default={getFlagsForElementVnode:o.getFlagsForElementVnode,linkEvent:d.linkEvent,createVNode:i.createVNode,cloneVNode:i.cloneVNode,NO_OP:r.NO_OP,EMPTY_OBJ:c.EMPTY_OBJ,render:u.render,findDOMNode:u.findDOMNode,createRenderer:u.createRenderer,options:a.options,version:"3.1.0",internal_patch:s.patch,internal_DOMNodeMap:u.componentToDOMNodeMap,internal_isUnitlessNumber:l.isUnitlessNumber,internal_normalize:o.normalize}},function(e,n,t){"use strict";var r=function(e,n,t,r,o,a,i,l){if(!e){var d;if(void 0===n)d=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[t,r,o,a,i,l],u=0;d=new Error(n.replace(/%s/g,function(){return s[u++]})),d.name="Invariant Violation"}throw d.framesToPop=1,d}};e.exports=r},function(e,n){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,n,t){var r=t(54);e.exports=r,e.exports.parse=r.parse,e.exports.compile=r.compile,e.exports.tokensToFunction=r.tokensToFunction,e.exports.tokensToRegExp=r.tokensToRegExp,e.exports.default=e.exports},function(e,n,t){function r(e,n){for(var t,r=[],o=0,a=0,i="",l=n&&n.delimiter||"/";null!=(t=b.exec(e));){var u=t[0],c=t[1],p=t.index;if(i+=e.slice(a,p),a=p+u.length,c)i+=c[1];else{var h=e[a],f=t[2],v=t[3],g=t[4],m=t[5],k=t[6],w=t[7];i&&(r.push(i),i="");var N=null!=f&&null!=h&&h!==f,y="+"===k||"*"===k,j="?"===k||"*"===k,V=t[2]||l,O=g||m;r.push({name:v||o++,prefix:f||"",delimiter:V,optional:j,repeat:y,partial:N,asterisk:!!w,pattern:O?s(O):w?".*":"[^"+d(V)+"]+?"})}}return a<e.length&&(i+=e.substr(a)),i&&r.push(i),r}function o(e,n){return l(r(e,n))}function a(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function i(e){return encodeURI(e).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){for(var n=new Array(e.length),t=0;t<e.length;t++)"object"==typeof e[t]&&(n[t]=new RegExp("^(?:"+e[t].pattern+")$"));return function(t,r){for(var o="",l=t||{},d=r||{},s=d.pretty?a:encodeURIComponent,u=0;u<e.length;u++){var c=e[u];if("string"!=typeof c){var p,h=l[c.name];if(null==h){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(m(h)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(h)+"`");if(0===h.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var f=0;f<h.length;f++){if(p=s(h[f]),!n[u].test(p))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(p)+"`");o+=(0===f?c.prefix:c.delimiter)+p}}else{if(p=c.asterisk?i(h):s(h),!n[u].test(p))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+p+'"');o+=c.prefix+p}}else o+=c}return o}}function d(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function u(e,n){return e.keys=n,e}function c(e){return e.sensitive?"":"i"}function p(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)n.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return u(e,n)}function h(e,n,t){for(var r=[],o=0;o<e.length;o++)r.push(g(e[o],n,t).source);return u(new RegExp("(?:"+r.join("|")+")",c(t)),n)}function f(e,n,t){return v(r(e,t),n,t)}function v(e,n,t){m(n)||(t=n||t,n=[]),t=t||{};for(var r=t.strict,o=!1!==t.end,a="",i=0;i<e.length;i++){var l=e[i];if("string"==typeof l)a+=d(l);else{var s=d(l.prefix),p="(?:"+l.pattern+")";n.push(l),l.repeat&&(p+="(?:"+s+p+")*"),p=l.optional?l.partial?s+"("+p+")?":"(?:"+s+"("+p+"))?":s+"("+p+")",a+=p}}var h=d(t.delimiter||"/"),f=a.slice(-h.length)===h;return r||(a=(f?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=o?"$":r&&f?"":"(?="+h+"|$)",u(new RegExp("^"+a,c(t)),n)}function g(e,n,t){return m(n)||(t=n||t,n=[]),t=t||{},e instanceof RegExp?p(e,n):m(e)?h(e,n,t):f(e,n,t)}var m=t(52);e.exports=g,e.exports.parse=r,e.exports.compile=o,e.exports.tokensToFunction=l,e.exports.tokensToRegExp=v;var b=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g")},function(e,n,t){"use strict";var r=function(e){return"/"===e.charAt(0)},o=function(e,n){for(var t=n,r=t+1,o=e.length;r<o;t+=1,r+=1)e[t]=e[r];e.pop()},a=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",t=e&&e.split("/")||[],a=n&&n.split("/")||[],i=e&&r(e),l=n&&r(n),d=i||l;if(e&&r(e)?a=t:t.length&&(a.pop(),a=a.concat(t)),!a.length)return"/";var s=void 0;if(a.length){var u=a[a.length-1];s="."===u||".."===u||""===u}else s=!1;for(var c=0,p=a.length;p>=0;p--){var h=a[p];"."===h?o(a,p):".."===h?(o(a,p),c++):c&&(o(a,p),c--)}if(!d)for(;c--;c)a.unshift("..");!d||""===a[0]||a[0]&&r(a[0])||a.unshift("");var f=a.join("/");return s&&"/"!==f.substr(-1)&&(f+="/"),f};e.exports=a},function(e,n,t){"use strict";n.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function e(n,t){if(n===t)return!0;if(null==n||null==t)return!1;if(Array.isArray(n))return Array.isArray(t)&&n.length===t.length&&n.every(function(n,r){return e(n,t[r])});var o=void 0===n?"undefined":r(n);if(o!==(void 0===t?"undefined":r(t)))return!1;if("object"===o){var a=n.valueOf(),i=t.valueOf();if(a!==n||i!==t)return e(a,i);var l=Object.keys(n),d=Object.keys(t);return l.length===d.length&&l.every(function(r){return e(n[r],t[r])})}return!1};n.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,